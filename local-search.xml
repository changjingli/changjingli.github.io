<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>06月总结 ｜ 日拱一卒，久久为功</title>
    <link href="/2025/07/07/monthly-2025-06/"/>
    <url>/2025/07/07/monthly-2025-06/</url>
    
    <content type="html"><![CDATA[<p>日拱一卒 久久为功</p><h2 id="一些感悟"><a href="#一些感悟" class="headerlink" title="一些感悟"></a>一些感悟</h2><p>本月复盘了关于职场成长的底层逻辑，总结出 <strong>踏实 -&gt; 可靠 -&gt; 信任</strong> 的成长路径。<strong>踏实</strong>意味着无论工作难易程度如何，都要百分百对待；当事事有回应、件件有着落时，自然形成<strong>可靠</strong>印象；久而久之别人会对你产生信任，从而获得更多机会。</p><p>我是典型的技术者思维，喜欢有挑战的工作，喜欢钻研东西，凭着一股子激情，也做出些成绩。靠<strong>激情</strong>固然可以拿下短期成果，但它终究是燃料，不是引擎。燃料可以是成就感、也可以是外部认可，一旦燃料枯竭，很容易产生疲惫和倦怠。</p><p>由于一味想做难的，却忽略了<strong>万丈高楼平地起</strong>的简单道理，再复杂的系统也是由许多简单的系统组成的。缺乏简单系统的处理能力，面对复杂系统又无从下手，久而久之，陷入“高不成，低不就”的尴尬地带——简单的不屑做、复杂的做不了，职业发展自然受限。</p><p>如何破局呢？<strong>第一阶段：</strong> 从简单的事情着手，把工作过程养成习惯，形成肌肉记忆，并且定时复盘，沉淀SOP；<strong>第二阶段：</strong> 简单的事情工具、脚本化，发挥自己技术优势，提高工作效率；<strong>第三阶段：</strong> 把省下的时间投入到更复杂的系统，提高处理复杂问题能力。</p><p>真正的成长，不在于一下子惊艳所有人，而在于<strong>日拱一卒，久久为功</strong>。愿自己做一个安静蓄力的人，不焦躁、不炫技，扎扎实实把路走宽。</p><p>以上SOP不仅适用于工作场景，同样适用理财、学习等各方面。</p><h2 id="学习成长"><a href="#学习成长" class="headerlink" title="学习成长"></a>学习成长</h2><p>截至6月底累计单词数为<code>5444</code>，本月掌握了 <strong>+141</strong> 新单词。</p><a href="/2025/06/08/monthly-2025-05/" title="上个月总结">上个月总结</a>《英语自学手册中》提到过**辅助精读法**，遇到不会的生词查字典后把**汉语释义不按顺序写在单独的纸上**，后面看到不懂的单词就去纸上找合适的意思。<p>受此启发，我在背单词过程中遇到背不下来的单词，每天把<strong>单词不按顺序写在单独的纸上</strong>，背不出来时根据汉语找合适的单词，第二天换一张新纸重复。通过动手+动脑，大大提高了学习效率。</p><h2 id="身体健康"><a href="#身体健康" class="headerlink" title="身体健康"></a>身体健康</h2><p>从3/26起开始有意做训练，旨在提高有氧适能。</p><p>6/1有氧适能指数为<code>37.9</code>，6/30为<code>36</code>，6月提高<code>-0.5%</code>。6月份虽然运动总时长够，但是单次训练心率二区间时长不够，导致对有氧适能提升帮助不大。</p><p>月底报名参加公司超慢跑俱乐部，俱乐部制定单次有效运动标准为 <strong>时长≥30分钟 且 平均步频≥140步/分</strong>。自己回顾了下跑步数据，发现以前平均步频最多才128步。于是按照标准跑了一趟试试，发现真的吃力，最后5分钟时感觉嗓子要充血了……</p><p>后来在小红书上学习超慢跑，初步整理出几点可行方法：缩短步长、增加步频，找点180步频的音乐听一听，这样坚持跑下来会轻松一些。截至月底跑了两次，每次平均步频149。这种强度，对于现在的身体来说挺吃力的，需要做好训练规划、以免受伤。不过效果也很明显，短短几天有氧是能就涨了<code>0.4</code>。</p><h2 id="财务理财"><a href="#财务理财" class="headerlink" title="财务理财"></a>财务理财</h2><p>6月份收益率<code>+2.75%</code>，上半年收益率为<code>+4.92%</code>。</p><p>6月除了定投纳指以外，还新购了摩根日本精选股票、全球消费基金；补仓恒生互联网科技ETF，降低持有成本，回了波血。其中纳指基金收益占6月收益的<code>42.7%</code>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>月度总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05月总结 ｜ 重构系统，主动进化</title>
    <link href="/2025/06/08/monthly-2025-05/"/>
    <url>/2025/06/08/monthly-2025-05/</url>
    
    <content type="html"><![CDATA[<p>重构系统 主动进化</p><h2 id="一些感悟"><a href="#一些感悟" class="headerlink" title="一些感悟"></a>一些感悟</h2><p>人到三十，感觉今年在疯狂学习/补习本应在青少年时期学习的东西：如何阅读、如何思考、如何表达、如何与他人沟通，如何与世界相处，如何激励自己，如何正确看待别人意见，如何耐心……</p><p>为了过好这一生，我们究竟还要学会哪些知识或技能呢？这个问题始终萦绕在我的脑海，直到偶然看到<a href="https://www.youtube.com/@%E6%9C%89%E5%A3%B0%E5%A4%A9%E6%B6%AF">雷军2011年在腾讯关于移动互联网的演讲</a>，提到为什么iPhone发布5年后仍然没有被超越的原因，他给出的原因是——真正的艺术品是没法抄的。</p><p>这不禁引起了我的无限好奇，什么叫艺术品？艺术品的标准是什么？哪些人能够鉴赏艺术品？怎么能够创造艺术品？</p><p>根据<a href="https://baike.baidu.com/item/%E8%89%BA%E6%9C%AF%E5%93%81/9185075">百度百科</a>的定义，艺术品的使用价值体现在<strong>精神层面</strong>而不是物质层面上，它是以满足人们的某种审美需要和精神需要为目的的，说白了就是基于<strong>人性</strong>研发的，为<strong>人</strong>服务的。</p><p>从春秋时期的《道德经》，还是上世纪的《人性的弱点》，里面关于人性的洞见，千年不衰。说明即使科技进步飞速，但是人性进步却不大。那么如果掌握了人性密码，是否就能在这个世界游刃有余了呢？</p><p>带着这个疑问，我遍寻人性密码的法门，发现哲学、心理学、人类学、社会学……这些学科太深太窄，不适合我快速理解。而管理学更综合，它横跨以上学科，更贴近实际问题。</p><p>管理学表面上是教你如何管理资源、企业、项目和组织，但它本质研究的对象其实是：如何管理人性，以及如何在不确定性中影响他人、达成目标。</p><p>计划6月份读一读中信出版社《30天精读MBA》，想看看，管理学能不能回答我这些问题。</p><h2 id="学习成长"><a href="#学习成长" class="headerlink" title="学习成长"></a>学习成长</h2><p>截至5月底累计单词数为<code>5303</code>，本月掌握了 <strong>+193</strong> 新单词。</p><p>本月读了郝海龙的<a href="https://sspai.com/series/77/list">《英语自学手册》</a>，作者结合自身学习母语的经验，总结出语言类学习的本质是“<strong>模仿与重复</strong>”，是一场与智商无关的学习，而是靠方法与坚持。学英语不一定要听说读写同步进行，完全可以从其中一项能力开始，等学到一定程度后再引入其他能力的学习。</p><p>根据<a href="https://www.163.com/dy/article/FLF265PA054452XZ.html">统计数据</a>，大部分成年英语母语者的词汇量在20000～35000之间。没错，是<strong>两万</strong>单词，这也只是美国大多数成年人词汇量的<strong>下限</strong>而已。</p><p>当你看到一个英文单词时，能够立即想到它的一个中文意思，就可以认为你记住了这个单词，就算这个单词有很多意思，也只需要记其中一个，通常是词典中的第一个。“模仿和重复”结合“遗忘曲线”，就是背单词的秘诀，与其每周集中背一次单词，不如每天20分钟效果好，这就是重复的力量。</p><p>学习语言的基本方法是模仿和重复，那么一定要找到正确模仿的对象，意味着我们只能从听力或阅读开始。作者建议我们先从阅读下手，因为在没有一定词汇和语法基础的情况下，直接从听力入手学习曲线过于陡峭，听力一项本身就需要具备多种能力，直接学起来很容易让人觉得枯燥，进而放弃。</p><p>阅读的训练方法是<strong>辅助精读法</strong>，即每篇文章读7遍，遇到不会的生词查字典后把汉语释义不按顺序写在单独的纸上，后面看到不懂的单词就去纸上找合适的意思，<strong>寻找的过程中相当于又记忆了一遍单词</strong>。训练的要求是要让每一篇英语文章读起来都像读汉语一样。按照作者的教学经验，认为能够按照训练要求完成100篇文章训练，每练25篇，你会觉得阅读能力有明显提升。</p><p>月底在新东方模拟测试雅思分数4分，6月份按照以上方法进行精读训练，重点提升阅读能力，6月底对比下效果。</p><h2 id="身体健康"><a href="#身体健康" class="headerlink" title="身体健康"></a>身体健康</h2><p>从3/26起开始有意做训练，旨在提高有氧适能。</p><p>5/1有氧适能指数为<code>37.2</code>，5/14为<code>38.1</code>，5/31为<code>37.9</code>，4月提高<code>1.8%</code>，属于<strong>小幅正向提升</strong>。</p><p>5月 <strong>心率二区间</strong> 累计训练时长<code>05:01:49</code>，有氧适能指数呈现稳步上升态势，月中由于工作原因连续熬夜，睡眠债务达到**42%**，导致指标降低。</p><p>6月份保持当前训练节奏，避免熬夜，尤其是连续熬夜。</p><h2 id="财务理财"><a href="#财务理财" class="headerlink" title="财务理财"></a>财务理财</h2><p>5月收益率为<code>+4.55%</code>。</p><p>调整了仓位情况，美股持仓减至<code>28%</code>，中概互联增至<code>10%</code>，这些板块当月贡献了较大收益。</p><p>增长智慧要有三个阶段，第一阶段是知道、其次是理解，最后是根据理解去实践内化知识，最后一步才是最重要的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>月度总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>04月总结 ｜ 学而时习，知行合一</title>
    <link href="/2025/05/04/monthly-2025-04/"/>
    <url>/2025/05/04/monthly-2025-04/</url>
    
    <content type="html"><![CDATA[<p>学而时习 知行合一</p><h2 id="一些感悟"><a href="#一些感悟" class="headerlink" title="一些感悟"></a>一些感悟</h2><p>这个月的一个转变源于我对“知与行”的重新理解。</p><p>过去我总觉得自己懂那么多大道理，却过得并不如意。这个月读到一篇故事让我豁然开朗，后世据此典故引申出成语<a href="https://baike.baidu.com/item/%E8%BD%AE%E6%89%81%E6%96%AB%E8%BD%AE/4301880">“轮扁斫轮”</a>，很好的解释了“为什么懂得很多道理，但依然过不好这一生”。</p><p>故事里，齐桓公在读书，木匠轮扁却说，那些书不过是“古人之糟粕”，因为真正的智慧是难以言传、只能靠自己体会与实践的。轮扁做轮子多年，知道松紧之间的微妙分寸，却说不出口、教不了儿子，只能靠手与心的配合去一点点打磨。</p><p>这让我明白，听懂再多道理，不如脚踏实地去验证一次，只有亲身验证后，才能真正变成能力。以有氧训练为例，我知道心率二区间能提升有氧能力，但过去从未真正落实。这个月我开始<strong>刻意记录与练习</strong>，逐渐掌握了训练频率、心率控制等关键细节，感受到从“知道”到“做到”的转变。</p><p>这段经历让我真正明白：<strong>成长不靠“听懂”，而靠“做到”；知行合一的过程，才是能力真正沉淀的地方。</strong></p><h2 id="学习成长"><a href="#学习成长" class="headerlink" title="学习成长"></a>学习成长</h2><p>截至4月底累计单词数为<code>5110</code>，突破了五千大关，一个值得纪念的里程碑。</p><h2 id="身体健康"><a href="#身体健康" class="headerlink" title="身体健康"></a>身体健康</h2><p>从3/26起开始有意做训练，旨在提高有氧适能。</p><p>4/1有氧适能指数为<code>32.9</code>，4/30为<code>37.2</code>，4月提高<code>13%</code>，相对3/26提高<code>14.8%</code>。</p><p>4月 <strong>心率二区间</strong> 累计训练时长<code>03:58:51</code>，有氧适能指数呈现稳步上升态势，24号起由于工作忙碌，<strong>连续3天未进行有氧训练</strong>，导致势能评估降低，幸运的是通过锻炼月底前又把数据拉回来了。</p><p>我认为最好的训练方式是跑步，主要关注时长和心率两个指标：每周大约一小时的二区间心率即可，不用追求配速。</p><p>跑步过程中不要张嘴呼吸，如果觉得喘不上来就放慢速度，只要心率达标即可，如果心率过快就放慢速度，甚至可以是走走停停，一定要记得自己的目标，不用上来就猛冲，这样跑不远、跑不久。</p><h2 id="财务理财"><a href="#财务理财" class="headerlink" title="财务理财"></a>财务理财</h2><p>4月收益率为<code>+1.51%</code>。</p><p>调整了仓位情况，美股持仓<code>46%</code>，该板块当月贡献了较大收益；<code>6%</code>在中概互联，该板块当月造成一定亏损。</p><p>目前，川普言论对股市的影响在减弱，所以纳指回了点血，继续看看5月份情况。</p>]]></content>
    
    
    
    <tags>
      
      <tag>月度总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>03月总结 ｜ 快速启动，战胜拖延</title>
    <link href="/2025/04/29/monthly-2025-03/"/>
    <url>/2025/04/29/monthly-2025-03/</url>
    
    <content type="html"><![CDATA[<p>4/3就想着要写3月总结，拖着拖着就到了月底。</p><p>不禁反思自己的拖延症为何如此严重，偶然读到一篇文章 <strong>《为什么快速工作比想象中的更重要？》</strong><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="【为什么快速工作比想象中的更重要？】 https://jsomers.net/blog/speed-matters">[1]</span></a></sup>，我在文中找到了一些线索。</p><p>作者认为快速完成的意义除了可以在单位时间内完成更多任务外，但不止于此：</p><ol><li>当行动迅速时，大脑会本能降低对新任务对成本评估，从而更愿意主动尝试</li><li>“快”会形成正反馈，“慢”会形成负反馈</li></ol><p>自己之所以不愿意写这篇总结，是因为大脑将“写作”归类到高耗能任务导致。由于觉得每篇文章会消耗好几天的时间，所以当我仅有几个小时的空余时间时，是绝不会考虑写文章的。久而久之就会形成低效的恶性循环 —— 因为快速完成的前提是刻意练习，缓慢的节奏会错失这种练习的机会。</p><p>改变的方法其实很简单 —— <strong>尝试加快速度去做</strong>。</p><p>这并不是说要粗心大意、敷衍了事。而是以一种自认为健康的心理节奏去推动自己，这样就会使得该任务在你心中的心理成本降低，由于心理成本降低，你反而会做的更多。比如网上很火的：每天做一个俯卧撑；如果想跑步，先要换上跑鞋离开家 等等……</p><p>回到写作上，可以运用 <strong>GTD法则</strong> <sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="【GTD法则 - 百度百科】  https://baike.baidu.com/item/GTD/7384910">[2]</span></a></sup> ，将一篇文章拆分成若干小步骤，不再面对“写整篇文章”的压力，而是只需“完成一个小步骤”。</p><p>回顾自己背单词的经历，从开始背单词至今已经连续坚持了210天，每天60张卡片，每周大概能完全掌握10个单词左右。之所以能坚持这么久，是因为每天卡片数量是固定的、每天消耗的时间差不多在10分钟左右，没啥心理负担，大脑就会将背单词自动归类到「低耗能」任务，所以每天背单词于我而言就是最最最简单的事情。</p><h2 id="学习成长"><a href="#学习成长" class="headerlink" title="学习成长"></a>学习成长</h2><p>唯一还在坚持的就是背单词，截止3月底累计单词数为4942。</p><p>需要总结背单词的经验，形成一份良好习惯养成的最佳实践，这样就能以极低心理代价拥有更多良好的习惯。</p><h2 id="身体健康"><a href="#身体健康" class="headerlink" title="身体健康"></a>身体健康</h2><p>从3/26起开始有意做训练，旨在提高有氧适能。通过累计约一小时的 <strong>心率二区间</strong> <sup id="fnref:3" class="footnote-ref"><a href="#fn:3" rel="footnote"><span class="hint--top hint--rounded" aria-label="心率二区间即心率在60-70%区间内，最大心率=220-年龄">[3]</span></a></sup> 跑步训练，月底的有氧适能提高约1%。</p><p>4月份提升很大，敬请期待4月总结。</p><h2 id="财务理财"><a href="#财务理财" class="headerlink" title="财务理财"></a>财务理财</h2><p>3月收益率为-3.04%。</p><p>调整了仓位情况，美股持仓减至35%，该板块当月表现偏弱；11%在大盘风格，当月表现亮眼，获得一定收益，所以比2月少亏0.82%。</p><hr><p>最后，本文实际花费时间为42分钟，远低于自己心理预估时间。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>【为什么快速工作比想象中的更重要？】 <a href="https://jsomers.net/blog/speed-matters">https://jsomers.net/blog/speed-matters</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>【GTD法则 - 百度百科】  <a href="https://baike.baidu.com/item/GTD/7384910">https://baike.baidu.com/item/GTD/7384910</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:3" class="footnote-text"><span>心率二区间即心率在60-70%区间内，最大心率=220-年龄<a href="#fnref:3" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>月度总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>02月总结 ｜ 咬定青山不放松，立根原在破岩中</title>
    <link href="/2025/03/18/monthly-2025-02/"/>
    <url>/2025/03/18/monthly-2025-02/</url>
    
    <content type="html"><![CDATA[<p>咬定青山不放松，立根原在破岩中。</p><h2 id="一些感悟"><a href="#一些感悟" class="headerlink" title="一些感悟"></a>一些感悟</h2><p>一个改变易疲劳体质的小技巧：管理你的能量，而非时间。</p><p>因为时间是有限资源，能量则不同。要意识到，能量是不断被消耗的，能量的消耗速度与事项复杂程度成正比，同时高能量能够创造高绩效。</p><p>好身体会产生能量，好的情绪可以提高能量质量，集中精力可以加强能量，精神追求可以激发能量。</p><h2 id="学习成长"><a href="#学习成长" class="headerlink" title="学习成长"></a>学习成长</h2><p>人活一世，是一个不断学习、适应的过程，学习如何与这个世界相处、学习如何与自己相处；学习如何在这个世界找到适合自己的位置；学习了解自己，接纳自己，跟自己和解。</p><p>本月读了一本新书《权力：为什么只为某些人所拥有》，书中最深刻的观点是：</p><blockquote><p>只要让老板高兴了，业绩表现真的不重要。反过来说也是一样，如果你让他们不高兴，出色的业绩表现也救不了你。</p></blockquote><h2 id="身体健康"><a href="#身体健康" class="headerlink" title="身体健康"></a>身体健康</h2><p>体重仍在175斤左右浮动；血氧饱和度从34回落到33，由于持续996的工作模式，想挤出能量锻炼身体，真的不容易，下个月继续努力。</p><h2 id="财务理财"><a href="#财务理财" class="headerlink" title="财务理财"></a>财务理财</h2><p>2月收益率为-3.86%。</p><p>调整了仓位情况，美股持仓减至39%，纳指基金受关税、科技巨头业绩增速不及预期等诸多影响。</p>]]></content>
    
    
    
    <tags>
      
      <tag>月度总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>01月总结 ｜ 过往皆为序章，新年充满希望</title>
    <link href="/2025/02/09/monthly-2025-01/"/>
    <url>/2025/02/09/monthly-2025-01/</url>
    
    <content type="html"><![CDATA[<p>过往皆为序章，新年充满希望。</p><p>任何事物都是有规律的，工作生活都是如此。而比知道规律本身更重要的，是能够在实践中懂得利用这些规律实现目标。</p><p>前面三十年在随波逐流，无论是成功还是失败，总是被动接受着，没有思考为什么会成功，为什么会失败。品尝到2024年浑浑噩噩带来的恶果后，意识到自己该做出改变了，是时候拥有一套稳定的人生操作系统，帮助自己形成一套稳定的内核，从而走得更远、走得更稳。</p><p>前面三十年在随波逐流，无论是成功还是失败，总是被动接受着，没有思考为什么会成功，为什么会失败。品尝到2024年浑浑噩噩带来的恶果后，意识到自己该做出改变了，是时候拥有一套稳定的人生操作系统，帮助自己形成一套稳定的内核，从而走得更远、走得更稳。</p><p>春节假期有两个收获：一条是来自<a href="https://www.bilibili.com/video/BV15q421P7Y9/?share_source=copy_web&vd_source=40b326dedf2ccc3322f8bda2e611e1df">渤海小吏的“成事”的逻辑</a>、另一条是Julian Shapiro介绍的<a href="https://www.julian.com/blog/mental-model-examples">构建思维模型</a>的方法。</p><h2 id="一些感悟"><a href="#一些感悟" class="headerlink" title="一些感悟"></a>一些感悟</h2><p>首先是成事的逻辑，作者认为做成一个事业有两个核心规律：</p><ol><li>兵马未动、粮草先行的打造一个能量正循环系统</li><li>你要判断自己的天赋在哪里，这是你腾飞的关键</li></ol><p>能量正循环系统是指在追求成功的过程中，需要有意识地寻找和抓取燃料，以维持能量的正循环，避免被小人和磨难耗光能量；同时找到自己的天赋方向，并在这条道路上建立正反馈的循环。强调物质与精神双重能量的补充对于持续努力的重要性，指出大多数人半途而废的原因在于缺乏持续的能量注入，未能在事业中找到正反馈。</p><p>视频中提到一句特别正确的话叫：人生是场长跑，对我来说感慨颇深。你不用着急走得多快，但是一定要稳，用力过猛反而走不远，这将时刻提醒着我做人做事不要焦虑，凡事眼光看长远些，大多数事放大到人生的维度上其实不值一提，完全不用太在意。</p><p>同时提到了康波周期理论，认为经济发展存在明显的周期性，每个周期都有一个增长期和下降期。大环境不好的时候，不要怨天尤人，这是自然规律，继续修炼内功，继续跑就可以了。跑得慢不怕，只要能量处于正循环就行，哪怕增长的少了些。</p><p>其次是思维模型，思维模型就像你的指南针，帮你找到问题的最佳答案。思维模型的关键用处：</p><ol><li>看透事物的运作机制 —— 优化系统以从中获得更多</li><li>做出更明智的选择 —— 做出更好的决策</li></ol><p>缺乏思维模型，通常会有两种迷茫的表现：</p><ol><li>你会不假思索地随波逐流</li><li>你会依赖过往经验和记忆中的建议来形成直觉。这比盲目随波逐流要强，但远不如严谨得运用思维模型来的高明。</li></ol><p>总的来说，这两个收获为自己在“道”的层面提供了指引，接下来就靠自己炼化为“术”。</p><h2 id="学习成长"><a href="#学习成长" class="headerlink" title="学习成长"></a>学习成长</h2><p>春节假期终于启动了高项软考复习，距离考试还有三个多月，需要加紧复习节奏了，每年只能考一次，争取今年考过，算是对自己2025年第一个短期目标的交代。</p><p>同时，看了3个多月的《老实人启蒙》也终于看完了，全程在“照镜子”。书中提供了很多实用的建议和策略，让读者学会在复杂环境中保护自己，帮助人们以更清醒的姿态面对生活。</p><h2 id="身体健康"><a href="#身体健康" class="headerlink" title="身体健康"></a>身体健康</h2><p>由于未刻意减重，体重在175斤左右浮动；血氧饱和度从33提升到34，可能是跑步影响的；2月份增加有氧运动时长，试试血氧能不能上来一些。</p><h2 id="财务理财"><a href="#财务理财" class="headerlink" title="财务理财"></a>财务理财</h2><p>1月收益率为+1.65%，美股持仓占76%，贡献了较多收益；由于DeepSeek的冲击，2月份看情况调整仓位情况。</p><p>最后，2025加油！人生是场长跑，跑得慢咱不怕，用力过猛</p>]]></content>
    
    
    
    <tags>
      
      <tag>月度总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何提高工时评估准确性</title>
    <link href="/2022/05/26/project-time-estimation/"/>
    <url>/2022/05/26/project-time-estimation/</url>
    
    <content type="html"><![CDATA[<blockquote><p>（开发软件时）前90%的代码要花费90%的开发时间，剩余的10%的代码要再花费90%的开发时间。<br>The first 90 percent of the code accounts for the first 90 percent of the development time. The remaining 10 percent of the code accounts for the other 90 percent of the development time.</p><p>——Tom Cargill，贝尔实验室</p></blockquote><p>合计180%的时间总量用看似荒诞的形式指出了软件开发项目里一个臭名昭著的倾向-完成时间常常严重超出预期时间表。这一格言体现出了软件工程的对编程项目的简单与困难部分的时间分配太过粗糙的问题，也揭示了许多项目拖延的原因（即对困难部分没有足够的估计）。换句话说，完成一个项目要花比预期的更多的时间和代码。</p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h3 id="知识-vs-技能"><a href="#知识-vs-技能" class="headerlink" title="知识 vs 技能"></a>知识 vs 技能</h3><h4 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h4><table><thead><tr><th></th><th><strong>定义</strong></th><th><strong>获取途径</strong></th><th><strong>难易程度</strong></th><th><strong>衡量标准</strong></th></tr></thead><tbody><tr><td><strong>知识</strong></td><td>经过提升总结与凝练的对客观世界的系统认识</td><td>人类历史上积累下的科学文化知识</td><td>看天分，因人而异</td><td>深度、广度</td></tr><tr><td><strong>技能</strong></td><td>指运用知识和经验执行一定活动的能力，是行为和认知活动的结合</td><td>后天习得</td><td>熟练程度与练习时长有关</td><td>熟练度</td></tr></tbody></table><h4 id="什么是知识？"><a href="#什么是知识？" class="headerlink" title="什么是知识？"></a>什么是知识？</h4><p>知识是很容易理解的概念，<strong>知识是人类从各个途径中获得的，经过提升总结与凝练的对客观世界的系统认识。</strong>柏拉图认为：一条陈述能称得上是知识必须满足三个条件，它一定是被验证过的，正确的，而且被人们相信的。</p><p>相对来说，知识是最容易获得的，尤其是互联网的发展，我们要想获得某一方面的知识只需轻点一下鼠标就能办到。</p><p><strong>知识的学习几乎是瞬间可以办到的，知道和不知道可以瞬间完成转换。</strong>比如你要知道中国有多少个省，只需要百度一下就可以马上知道。</p><p>学生在学校学习的主要内容就是人类历史上积累下来的科学文化知识，只需要把这些知识掌握了就算完成学习任务了。但即使是最容易的知识的学习，对很多学生来说也感觉困难重重。</p><p>知识是技能和能力形成的基础，没有相关的知识，就很难有技能和能力。在日常生活中，知识丰富的人相对来说能力也会比较突出。但并不是知识丰富的人能力就一定强，书呆子就是其中的典型代表。</p><h4 id="什么是技能？"><a href="#什么是技能？" class="headerlink" title="什么是技能？"></a>什么是技能？</h4><p><strong>技能</strong>是指运用知识和经验执行一定活动的能力，是行为和认知活动的结合。技能是通过一定的方式后天习得的，技能和知识是密不可分的。</p><p>技能一般用熟练程度来衡量，比如开车的技能就是用你的熟练程度来衡量你的驾驶水平。而知识一般用广度和深度来衡量。</p><p><strong>学习技能最大的特点就是要到实践中去练习，如果用学习知识的方法来学习技能，效果一定好不了。比如我们现在学习英语时普遍犯的错误就是把英语当成了知识来学习。</strong></p><p>语言是一种技能而不是知识，需要的是在实践中大量的运用和练习，三岁小孩为什么就能基本掌握一门语言，就是因为他是从实践中练习学会的。如果我们把英语当作一种技能来学习，不可能会出现学了十几年英语还不会听说的情况。<br>虽然掌握技能比知识要难一些，但普通人只需要一定的时间和重复的练习，都可以达到比较高的水平。</p><p>请问工时评估准确是知识还是技能呢？答案当然是技能，那么如何提高该技能熟练度呢，接下来我将介绍PDCA模型。</p><h3 id="PDCA（戴明环）"><a href="#PDCA（戴明环）" class="headerlink" title="PDCA（戴明环）"></a>PDCA（戴明环）</h3><p>PDCA是英语单词**Plan(计划)、Do(执行)、Check(检查)和Act(处理)**的第一个字母，PDCA循环就是按照这样的顺序进行质量管理，并且循环不止地进行下去的科学程序。</p><div style="display: flex; align-items: stretch; justify-content: space-between"><img src="https://changjingli-blog.oss-cn-shanghai.aliyuncs.com//blog/1651656370587-0cef31f3-88ff-48de-817d-160be0fba749Z2XMmp.png" alt="PDCA 循环" style="width: 370px" /><img src="https://changjingli-blog.oss-cn-shanghai.aliyuncs.com//blog/1651656437752-1b90d20c-f43e-4a76-9c8c-43e8c35785faDt4IK5.png" alt="威廉·爱德华兹·戴明" style="width: 270px" /></div><p><strong>P（Plan）–计划：</strong>确定项目目标、方针和计划。<br><strong>D（Do）–执行：</strong>根据目标，设计具体的方法，并执行具体的任务。<br><strong>C（Check）– 检查：</strong>根据实施情况，对比原计划，找出偏差。<br><strong>A（Action）–行动：</strong>又称“Adjust”。此阶段是改进流程的重要一环。对Check阶段的结果进行处理，成功的经验予以肯定并标准化；失败的经验加以总结，避免复现。对于没有解决的问题，放到下一个PDCA循环处理。</p><h2 id="提高估算准确性的方法"><a href="#提高估算准确性的方法" class="headerlink" title="提高估算准确性的方法"></a>提高估算准确性的方法</h2><p>接下来以某物流项目功能举例：</p><h3 id="Plan-阶段"><a href="#Plan-阶段" class="headerlink" title="Plan 阶段"></a>Plan 阶段</h3><div class="note note-warning">            <p>Plan阶段最重要的一点：像产品一样站在全局，去思考业务。</p><p>不要被角色限制，这样才能更好的理解系统。</p>          </div><h4 id="1-通过头脑风暴将需要的功能，按照MECE分析法进行拆解，脑图内容分为两类"><a href="#1-通过头脑风暴将需要的功能，按照MECE分析法进行拆解，脑图内容分为两类" class="headerlink" title="1. 通过头脑风暴将需要的功能，按照MECE分析法进行拆解，脑图内容分为两类"></a>1. 通过头脑风暴将需要的功能，按照<a href="https://baike.baidu.com/item/MECE%E5%88%86%E6%9E%90%E6%B3%95/2026128">MECE分析法</a>进行拆解，脑图内容分为两类</h4><ol><li><strong>业务</strong>，即系统最终实现什么功能</li><li><strong>支撑</strong>，即为了实现业务目标，需要哪些依赖</li><li><strong>争议点</strong>，即不清晰的地方，需要找别人确认</li></ol><p><img src="https://changjingli-blog.oss-cn-shanghai.aliyuncs.com//blog/image-20220612204007020TqJSId.png" alt="物流查询头脑风暴示意图"></p><h4 id="2-绘制流程图，确定业务逻辑"><a href="#2-绘制流程图，确定业务逻辑" class="headerlink" title="2. 绘制流程图，确定业务逻辑"></a>2. 绘制流程图，确定业务逻辑</h4><p>目的：验证业务逻辑是否闭环，识别出异常情况，同时将单个流程的输入/输出标明，防止流程无法流转。<br><img src="https://changjingli-blog.oss-cn-shanghai.aliyuncs.com//blog/%E4%BD%B3%E5%88%A9%E8%BE%BE%E7%89%A9%E6%B5%81%E6%9F%A5%E8%AF%A2%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B%E5%9B%BEXCM5Kt.png" alt="物流查询业务流程图"></p><h4 id="4-评估工时"><a href="#4-评估工时" class="headerlink" title="4. 评估工时"></a>4. 评估工时</h4><p><strong>4.1 估算工时的方法：</strong></p><ol><li>类比估算<br>类比估算是指以过去的类似项目的参数值（如持续时间、预算、规模、重量和复杂性）为基础，来估算未来项目的同类参数或指标。<strong>用于项目早期阶段或信息不足时，具有成本低、速度快的优点，但准确性差。</strong></li><li>参数估算<br>利用历史数据之际嗯的统计关系和其他变量，来进行项目工时估算。<strong>参数估算的准确性取决于参数模型的成熟度和基础数据的可靠性。</strong>可以针对整个项目或项目中的某个部分，并可与其他估算方法联合使用。</li></ol><p>如果建设一座埃菲尔铁塔需要3年，那么建设10座需要的历时为？<br>—— 如果只是一个建筑公司，则需要30年</p><ol><li>三点估算（概念起源于计划评审技术PERT）<br>通过考虑估算中的不确定性和风险，可以提高活动持续时间估算的准确性。<br>公式：最可能的工时 = （乐观时间 + 4*可能的时间 + 悲观时间）/ 6</li></ol><p>练一练：<br>A公司的某项目即将开始，项目经理估计该项目10天即可完成，如果出现问题耽搁了也不会超过20天完成，最快6天即可完成。根据项目历时估计中的三点估算法，你认为该项目的历时为（11）天</p><p><strong>4.2 根据头脑风暴、流程图、原型估算时间</strong></p><table><thead><tr><th>ID</th><th>任务名称</th><th>优先级</th><th>负责人</th><th>依赖</th><th>预估工作量（人/天）</th></tr></thead><tbody><tr><td>T01</td><td>登陆/注册</td><td></td><td></td><td></td><td>4</td></tr><tr><td>T02</td><td>首页</td><td></td><td></td><td></td><td>4</td></tr><tr><td>T03</td><td>个人中心</td><td></td><td></td><td></td><td>2</td></tr><tr><td>T04</td><td>运单列表</td><td></td><td></td><td></td><td>4</td></tr><tr><td>T05</td><td>运单详情</td><td></td><td></td><td></td><td>5</td></tr><tr><td>T06</td><td>人脸实名验证</td><td></td><td></td><td></td><td>3</td></tr><tr><td>T06</td><td>隐私协议页面</td><td></td><td></td><td></td><td>2</td></tr><tr><td>T06</td><td>接口联调试</td><td></td><td></td><td></td><td>3</td></tr><tr><td>T06</td><td>测试+BUG修复</td><td></td><td></td><td></td><td>7</td></tr><tr><td>合计</td><td></td><td></td><td></td><td></td><td>34 （人/天）</td></tr></tbody></table><h3 id="Do-阶段"><a href="#Do-阶段" class="headerlink" title="Do 阶段"></a>Do 阶段</h3><h4 id="1-描述进展"><a href="#1-描述进展" class="headerlink" title="1. 描述进展"></a>1. 描述进展</h4><p>确认进度计划是否正常，可能会有<strong>进度提前、进度正常、进度滞后</strong>三种结果</p><h4 id="2-评估风险"><a href="#2-评估风险" class="headerlink" title="2. 评估风险"></a>2. 评估风险</h4><p>是否出现了意外情况或计划中未预料到的风险？是什么？</p><div class="note note-info">            <p><strong>举例：</strong><br>例如登录注册功能需要对接物流公司ERP，老用户无需重复注册，若没有提前预知则无法进行后续接口对接。</p>          </div><h4 id="3-调整方案（如有风险）"><a href="#3-调整方案（如有风险）" class="headerlink" title="3. 调整方案（如有风险）"></a>3. 调整方案（如有风险）</h4><p><strong>所有的风险都要及时同步TL！！！</strong><br><strong>所有的风险都要及时同步TL！！！</strong><br><strong>所有的风险都要及时同步TL！！！</strong><br><strong>（重要的话说三遍）</strong><br>自己半天内能解决掉的风险，允许事后同步；反之需要立即同步，向上级寻求解决方案。</p><p>如果有风险，是否需要调整计划？如何调整？需要通知哪些干系人？有哪些影响？</p><div class="note note-info">            <p><strong>举例：</strong><br>发现由于物流公司ERP登录、注册接口未按时提供，导致后续流程无法正常进行时。需要尽快反馈给TL、PM<strong>（通知干系人）</strong>，说清楚目前遇到的问题、以及需要得到的帮助，PM联系到对方的开发负责人，对方告知需要3天可以提供<strong>（需要调整计划）</strong>。于是告知PM把后面的工作前移，等接口开通后再调登录注册<strong>（如何调整）</strong>。最终接口开通后，成功完成接口对接。</p>          </div><h4 id="4-过程记录"><a href="#4-过程记录" class="headerlink" title="4. 过程记录"></a>4. 过程记录</h4><p>值得记录的事情/产出沉淀</p><h3 id="Check-阶段"><a href="#Check-阶段" class="headerlink" title="Check 阶段"></a>Check 阶段</h3><h4 id="1-对比原计划"><a href="#1-对比原计划" class="headerlink" title="1. 对比原计划"></a>1. 对比原计划</h4><p>确认进度计划是否正常，可能会有<strong>进度提前、进度正常、进度滞后</strong>三种结果</p><h4 id="2-分析影响当前进度的原因"><a href="#2-分析影响当前进度的原因" class="headerlink" title="2.分析影响当前进度的原因"></a>2.分析影响当前进度的原因</h4><p>正常来说，进度提前与进度滞后都不是好的结果。进度提前意味着工时可能估多了，滞后则意味着估少了。我们需要客观分析原因，可采用<strong>五个为什么 (Five whys)、鱼骨图分析</strong>具体原因<strong>。</strong></p><p>主观原因导致的进度偏差，需要及时做出调整，如加班；客观原因导致的进度偏差，我们及时向干系人同步风险，做好力所能及的事情即可。</p><blockquote><p><strong>举例：</strong><br>Why：页面进度为何延期了？<br>A：UI稿没有按时给。<br>Why：UI稿为何没有按时给？<br>A：因为UI那边设计的需求太多，我们的还在排队<br>Why：为何没有跟踪设计稿进度，等到最后一天才知道给不出来？<br>A：因为相信UI会按时给，所以缺乏过程追踪。</p><p>从页面延期分析出UI设计中，缺乏过程追踪，UI稿延期交付后，前端也被动延期。假如了解到UI稿可能会延期，那么前端可以及时采取操作，主动推进项目。</p></blockquote><h3 id="Action-阶段"><a href="#Action-阶段" class="headerlink" title="Action 阶段"></a>Action 阶段</h3><h4 id="1-总结经验"><a href="#1-总结经验" class="headerlink" title="1. 总结经验"></a>1. 总结经验</h4><p>记录项目成功/失败的原因或教训，并加以标准化，将经验应用于下次的PDCA循环。</p><h4 id="2-遗留问题"><a href="#2-遗留问题" class="headerlink" title="2. 遗留问题"></a>2. 遗留问题</h4><p>检查是否有遗漏问题，记录并放在下一个循环内解决。</p><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="MECE"><a href="#MECE" class="headerlink" title="MECE"></a>MECE</h3><p><strong>MECE</strong>，是Mutually Exclusive Collectively Exhaustive，中文意思是“相互独立，完全穷尽”。 也就是对于一个重大的议题，能够做到不重叠、不遗漏的分类，而且能够借此有效把握问题的核心，并解决问题的方法。</p><h3 id="PDCA"><a href="#PDCA" class="headerlink" title="PDCA"></a>PDCA</h3><p><strong>PDCA</strong>（Plan-Do-Check-Act的简称）循环式<a href="https://zh.wikipedia.org/wiki/%E5%93%81%E8%B3%AA">品质</a><a href="https://zh.wikipedia.org/wiki/%E7%AE%A1%E7%90%86">管理</a>，针对品质工作按规划、执行、查核与行动来进行活动，以确保可靠度目标之达成，并进而促使品质持续改善。由美国学者<a href="https://zh.wikipedia.org/wiki/%E6%84%9B%E5%BE%B7%E8%8F%AF%E8%8C%B2%C2%B7%E6%88%B4%E6%98%8E">爱德华兹·戴明</a>提出，因此也称<strong>戴明环</strong>。这个四步的循环一般用来提高产品品质和改善产品生产过程。这个过程循环也被人熟知为：Plan-Do-Study-Act（PDSA），戴明圆环（Deming circle/cycle/wheel）或者哈特利圆环。另一个不同的版本是OPDCA，加入了O（observation观察），有些说法认为是获得当前的状况的意思。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>《非暴力沟通》读书笔记</title>
    <link href="/2022/01/06/nonviolent-communication-note/"/>
    <url>/2022/01/06/nonviolent-communication-note/</url>
    
    <content type="html"><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>我们大多数的人使用的语言倾向于评判、比较、命令和指责，而不是鼓励我们倾听彼此的感受和需要。</p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h3 id="什么是“暴力”？"><a href="#什么是“暴力”？" class="headerlink" title="什么是“暴力”？"></a>什么是“暴力”？</h3><p>暴力分“身体的暴力”与“隐蔽的暴力”两种。如果某个行为涉及使用武力，那它就属于身体的暴力；如果主要造成精神伤害，那它就属于隐蔽的暴力。</p><p>后者虽与前者相比，危害性不那么明显，但其害处更大，归根结底是“隐蔽的暴力”激怒了受害者，使他做出暴力的反抗。</p><p>暴力的根源在于人们忽视彼此的感受与需要，而将冲突归咎于对方——至少大部分的根源都是如此。</p><h3 id="什么是“非暴力”？"><a href="#什么是“非暴力”？" class="headerlink" title="什么是“非暴力”？"></a>什么是“非暴力”？</h3><p>非暴力是指暴力消退后，自然流露出的爱。非暴力沟通的基础是一些沟通方式——即使在逆境中，它们也能使人乐于互助。</p><h3 id="什么是“非暴力沟通”？"><a href="#什么是“非暴力沟通”？" class="headerlink" title="什么是“非暴力沟通”？"></a>什么是“非暴力沟通”？</h3><p>非暴力沟通知道我们转变谈话和聆听的方式。我们不再条件反射式地反应，而是去明了自己的观察、感受和愿望，有意识地使用语言。我们既诚实、清晰地表达自己，又尊重与倾听他人。</p><p>非暴力沟通的目的不是为了改变他人来迎合我们。相反，非暴力沟通重视每个人的需要，它的目的是帮助我们在诚实和倾听的基础上与人联系。</p><p>将沟通过程拆解为四大要素，借助这四大要素诚实地表达自己，举个例子 🌰</p><blockquote><p>首先，留意发生的事情。我们此刻观察到什么？不管是否喜欢，只是说出人们所做的事情。要点是，清楚地表达观察结果，而不判断或评估。接着，表达感受，例如受伤、害怕、喜悦、开心、气愤等等。然后，说出哪些需要导致那样的感受。一旦用非暴力沟通诚实地表达自己，前三个要素就会得到体现。</p><p>举例来说，一位母亲可能对她处于青春期的儿子说：“费利克斯，看到咖啡桌下的两只脏袜子和电视机旁的三只，我不太高兴，因为我看重整洁。”接着，她立即提出非暴力沟通的第四个要素——具体的请求：“你是否愿意将袜子拿到房间或放进洗衣机？”这一要素明确告知他人，我们期待他采取何种行动，来满足我们。这样，这位母亲就清楚地说出非暴力沟通的四个要素。借助这四个要素诚实地表达自己，是非暴力沟通的一个方面。</p><p>—— 马歇尔卢森堡. 非暴力沟通 (Chinese Edition) (Kindle 位置 132-140). 华夏出版社. Kindle 版本.</p></blockquote><h2 id="非暴力沟通的四要素"><a href="#非暴力沟通的四要素" class="headerlink" title="非暴力沟通的四要素"></a>非暴力沟通的四要素</h2><h3 id="观察"><a href="#观察" class="headerlink" title="观察"></a><strong>观察</strong></h3><p>非暴力沟通的第一要素是观察。我们仔细观察正在发生的事情，并清楚地说出观察结果。将观察和评论混为一谈，别人就会倾向于听到批评，并反驳我们。非暴力沟通是动态的语言，不主张绝对化的结论。</p><p>区分观察和评论：<br><img src="https://changjingli-blog.oss-cn-shanghai.aliyuncs.com//blog/image-20220106225324365NeXmJo.png" alt="区分观察和评论"></p><blockquote><p>举个例子：</p><p>非暴力的沟通方式会说“欧文在过去的5场比赛中没有进一个球”，而不是说“欧文是一个差劲的前锋”。</p></blockquote><p>练习：观察或评论？</p><ol><li>“哥哥昨天无缘无故对我发脾气。”</li><li>“昨晚妹妹在看电视时啃指甲。”</li><li>“开会时，经理没有问我的意见。”</li><li>“我父亲是个好人。”</li><li>“小明工作的时间太长了。”</li><li>“小王告诉我，我穿黄色衣服不好看。”</li><li>“我儿子经常不刷牙。”</li></ol><p>  答案：</p><ol><li>“无缘无故”是评论。此外，我认为说哥哥发脾气了也是评论。他可能是感到害怕、悲伤或者别的。</li><li>观察</li><li>观察</li><li>“好人”是评论。以下例句描述了观察结果而不含任何评论：“在过去的25年中，父亲将他收入的十分之一捐给了慈善机构。”</li><li>“太长了”是评论。以下例句描述了观察结果而不含任何评论：“本周小明在办公室工作了70小时以上。”</li><li>观察</li><li>“经常”是评论。以下例句描述了观察结果而不含任何评论：“本周我儿子有两次没刷牙就上床睡觉。”</li></ol><h3 id="感受"><a href="#感受" class="headerlink" title="感受"></a><strong>感受</strong></h3><p>非暴力沟通的第二要素是感受。通过建立表达感受的词汇表，我们可以更清楚地表达感受，从而使沟通更为顺畅。在表达感受时，示弱有助于解决冲突。</p><p>区分感受和想法：<br>A. 想法。</p><blockquote><p>“我觉得我的吉他弹得不好。”</p></blockquote><ul><li>在这个句子中，我评价自己吉他弹得好不好，而没有表达感受。</li></ul><p>B. 感受。</p><blockquote><p>“作为吉他手，我有些失落。”<br>“作为吉他手，我很郁闷。”</p></blockquote><ul><li>如果认为自己吉他弹的不好，我可能会失落、郁闷或厌烦。</li></ul><p><u>当我们说“我觉得”，我们常常并不是在表达感受，而是在表达想法。</u>例如有时我们会说：“我觉得这不公平。”在这句话中，“我觉得”换成“我认为”也许更恰当。</p><p>还有一些词表达的是想法，而非感受。例如：被抛弃、被羞辱、被虐待、被打扰、被拒绝、不受重视、被束缚、被欺负、无人理睬、得不到支持、被利用、被贬低。</p><p>清楚地表达感受需要丰富的词汇，“很好”或“很差”这样的词语很难让人明白我们实际的状况。故我们需要建立表达感受的词汇表：</p><ol><li><p>下列词语可用来表达我们的需要得到满足时的感受</p><blockquote><p>兴奋  喜悦  欣喜  甜蜜  精力充沛  兴高采烈<br>感激  感动  乐观  自信  振作  振奋  开心<br>高兴  快乐  愉快  幸福  陶醉  满足  欣慰  心旷神怡<br>喜出望外  平静  自在  舒适  放松  踏实  安全  温暖  放心  无忧无虑</p></blockquote></li><li><p>下列词语可用来表达我们的需要没有得到满足时的感受：</p><blockquote><p>害怕  担心  焦虑  忧虑  着急  紧张  心神不宁  心烦意乱<br>忧伤  沮丧  灰心  气馁  泄气  绝望  伤感  凄凉  悲伤<br>恼怒  愤怒  烦恼  苦恼  生气  厌烦  不满  不快  不耐烦  不高兴<br>震惊  失望  困惑  茫然  寂寞  孤独  郁闷  难过  悲观<br>沉重  麻木  精疲力尽  委靡不振  疲惫不堪  昏昏欲睡<br>无精打采  尴尬  惭愧  内疚  妒忌  遗憾  不舒服</p></blockquote><p>练习：表达感受</p></li><li><p>“我觉得你不爱我。”</p></li><li><p>“你要离开，我很难过。”</p></li><li><p>“当你说那句话时，我感到害怕。”</p></li><li><p>“如果你不和我打招呼，我会觉得你不在乎我。”</p></li><li><p>“你能来，我很高兴。”</p></li><li><p>“你真可恶。”</p></li><li><p>“我想打你。”</p></li></ol><p>  答案：</p><ol><li>我不认为“你不爱我”是感受。对我来说，它是对他人生活感受的判断。以下例句表达了感受：“我很伤心。”</li><li>感受</li><li>感受</li><li>我不认为“你不在乎我”是感受。对我来说，它是对他人态度的判断。以下例句表达了感受：“我进来的时候你，你没和我打招呼，我感到孤单。”</li><li>感受</li><li>我不认为“可恶”是感受。对我来说，它是评价。以下例句表达了感受：“我有些烦躁。”</li><li>我不认为“想打你”是感受。对我来说，它表达的是想法。以下例句表达了感受：“想到你，我就火冒三丈。”</li></ol><h3 id="需要"><a href="#需要" class="headerlink" title="需要"></a><strong>需要</strong></h3><p>非暴力沟通的第三个要素——感受根源于我们自身的需要。</p><p>当我们听到不中听的话是，我们可以有四种选择：<br>第一种是认为自己犯了错。例如，有人气愤地说：“我从没见过像你这么自私的人！”这时，我们可能会自责：“哦，我没有考虑别人的感受，真是太自私了！”这会导致我们内疚、惭愧，甚至厌恶自己。<br>第二种是指责对方。这时，我们也许会驳斥对方：“你没有权利这么说！我一直都很在乎你的感受。你才自私！”在争吵时，我们一般会感到恼怒。<br>第三种是了解我们的感受和需要。这时，我们可能会发现我们有些伤心，因为我们看重信任和接纳。<br>第四种是用心体会他人的感受和需要。这时，我们也许就会想“他伤心可能是因为他需要体贴和支持”。</p><p>对他人的指责、批评、评论以及分析反映了我们的需要和价值观。如果我们通过批评来提出主张，人们的反应常常是申辩或者反击。反之，如果我们说出我们的需要，其他人就有可能作出积极的回应。</p><blockquote><p>举个例子：<br>如果一个说“你从不理解我”，他实际上是渴望得到理解。如果太太说“这个星期你每天都工作到很晚，你喜欢工作，不喜欢我”，这说明她看中亲密关系。</p></blockquote><p>对于大多数人来说，个人成长一般会经历三个阶段：</p><ol><li>“情感的奴隶”——我们认为自己有义务使他人快乐；</li><li>“面目可憎”时间——此时，我们拒绝考虑他人的感受和需要；</li><li>“生活的主人”——我们意识到，虽然我们对自己的意愿、感受和行动富有完全的责任，但无法为他人负责。与此同时，我们还认识到，我们无法牺牲他人来满足自己的需要。</li></ol><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a><strong>请求</strong></h3><p>非暴力沟通的第四要素是请求。我们告诉人们，为了改善生活，我们希望他们做什么。避免使用抽象的语言，而借助具体的描述，来提出请求。</p><p>请求的过程分以下步骤：</p><ol><li><strong>提出具体的请求</strong><br> 首先清楚地告诉对方，我们希望他们做什么。如果我们请求他们不做什么，对方也许会感到困惑，不知道我们到底想要什么。而且这样的请求还容易引起别人的反感。</li><li><strong>明确谈话的目的</strong><br> 有时候，我们并不需要直接提出请求。比如你跟妈说你饿了，在这种情况下，很明显是希望妈妈给你做饭吃。<br> 然而有些时候，我们也许只是说出我们的不快，却误以为别人知道我们想要什么。例如太太对先生说：“我叫你带瓶酱油回来，可是你忘了。好烦呀！”也许，她只是希望先生马上出去买酱油，但先生可能会以为她只是在指责他。如果我们只是表达自己的感受，别人可能就不清楚我们想要什么。</li><li><strong>请求反馈</strong><br> 为了确保对方确实明白我们的意思，我们希望他充分表达他的理解。这样，一旦他的理解与我们的意思有所不同，我们就有机会作适当的补充。</li><li><strong>了解他人的反应</strong><br> 在确认对方已经明白后，我们常常会急于了解对方的反应。一般来说分以下三个方面：<br> a. 对方此时此刻的感受<br> b. 对方在想什么<br> c. 对方是否接受我们的请求</li><li><strong>在集体讨论时提出请求</strong><br> 参加集体讨论时，说清楚我们希望得到怎样的反馈，是至关重要的。如果不清楚发言的目的，我们的讨论也许只是在浪费时间，而无法满足任何人的需要。</li></ol><p><strong>如何区分命令和请求？</strong><br><u>请求没有得到满足时，提出请求的人如果批评和指责，那就是命令；如果想利用对方的内疚来达到目的，也是命令。</u></p><p>在生活中，如果我们不想勉强别人，那么清楚地表达这一点是非常重要的——这有助于人们相信我们提出的是请求而非命令。例如，我们可以说：“帮我打开窗户好吗？”而不是说：“请打开窗户！”</p><blockquote><p>举个例子🌰<br>杰克：“我很难过，希望今晚你能陪我聊聊。”<br>珍妮：“杰克，我今天很累。如果你想今晚有人陪你，你去找其他人好不好？”</p><p>// 是不是命令需要看珍妮拒绝后，杰克的反应<br>杰克：“你这人真自私！”（这是命令！因为他并没有重视珍妮休息的需要，而开始指责她）<br>杰克：“你知道难过极了。你若是真的爱我，今晚就会留下来陪我。”（这段话中仍没有重视珍妮的需要，而认为珍妮不再爱她。）</p><p>杰克：“珍妮，你是说你很累了，今晚需要休息？”（尊重珍妮的感受和需要，他表达的的愿望就是请求而非命令）</p></blockquote><h2 id="如何倾听他人？"><a href="#如何倾听他人？" class="headerlink" title="如何倾听他人？"></a>如何倾听他人？</h2><p>当他人遭遇不幸时，我们常常急于提出建议，安慰或表达我们的态度和感受。为了倾听他人，我们需要放下已有的想法和判断，一心一意地体会他人。倾听他人有助于对他人的理解和接纳。为了更好地倾听他人，我们需要：</p><ol><li><p><strong>体会他人的感受和需要。</strong><br>不论别人说什么，我们只听到他们此时此刻的（a）观察，（b）感受，（c）需要，和（d）请求。</p></li><li><p><strong>给他人反馈。</strong><br>在倾听到以上四要素之后，我们可以主动表达我们的理解，这样做有助于人们体会自己的状况，从而更深入了解自己。</p></li><li><p><strong>保持关注。</strong><br>在解决问题或询问他人的请求前，为他人的充分表达创造条件。如何判断对方的感受是否充分表达呢？首先，如果一个人觉得别人已经完全明白他的意思了，他就会变得轻松。这是我们也会感到放松。另一个明显标志是，他停止了谈话。如果无法确定，不妨问一句：“你还有什么话要告诉我吗？”</p><p>当我们痛苦得无法倾听他人时，我们需要：</p></li><li><p>体会自己的感受和需要；</p></li><li><p>大声地提出请求；</p></li><li><p>换一个环境</p><p>会妨碍我们体会他人的行为：</p><ol><li>建议：“我想你应该……”</li><li>比较：“这算不了什么。你听听我的经历……”</li><li>说教：“如果你这样做……你将会得到很大的好处。”</li><li>安慰：“这不是你的错；你已经尽最大努力了。”</li><li>回忆：“这让我想起……”</li><li>否定：“高兴一点。不要这么难过。”</li><li>同情：“哦，你这可怜的人……”</li><li>询问：“这种情况是从什么时候开始的？”</li><li>辩解：“我原想早点打电话给你，但昨晚……”</li><li>纠正：“事情的经过不是那样的。”</li></ol></li></ol><h2 id="如何爱自己？"><a href="#如何爱自己？" class="headerlink" title="如何爱自己？"></a>如何爱自己？</h2><p>非暴力沟通最重要的应用也许在于培育对自己的爱。当我们的表现不完美时，我们可以通过体会忧伤和自我宽恕，来看清个人成长的方向，以及避免自我惩罚。评价自己的行为时，我们专注于尚未满足的需要；这样，我们就不再依赖羞愧、内疚、恼怒或沮丧的心理来寻求改变，而让爱主导我们的学习和成长。</p><p>同时，在日常生活中，我们主动根据需要和价值观来选择生活。我们的行为不再是为了履行职责、获得回报、逃避惩罚或避免感到内疚和羞愧。通过深入理解我们行为的动机，并用“选择做”来取代“不得不”，我们的生活将变得和谐并充满欢乐。</p><h2 id="如何充分表达愤怒？"><a href="#如何充分表达愤怒？" class="headerlink" title="如何充分表达愤怒？"></a>如何充分表达愤怒？</h2><p>表达愤怒的四个步骤是：</p><ol><li>停下来，除了呼吸，什么都别做；</li><li>想一想是什么想法使我们生气了；</li><li>体会自己的需要；</li><li>表达感受和尚未满足的需要。有时，在第3步和第4步之间，我们需要先倾听他人。</li></ol><p>如果你希望自己在生气的时候也能运用非暴力沟通，我建议你做以下的练习。</p><p>在前面，我们已经提到，我们生气是因为我们的想法——我们认为人们“应该”或“不应该”做什么，我们还给人贴上各种标签，并说长论短。请留意我们头脑中“我不喜欢抽烟的人……”之类的想法。然后，问自己：“我不喜欢他们……，是因为我什么样的需要没有得到满足？”通过这样的方式，我们就把注意力放在了尚未得到满足的需要，而不是考虑他人有什么过错。</p><h2 id="如何充分表达感激？"><a href="#如何充分表达感激？" class="headerlink" title="如何充分表达感激？"></a>如何充分表达感激？</h2><p>赞扬也可能造成人与人之间的隔阂。这听起来似乎很奇怪。不过，请注意：在赞扬他人时，我们很少揭示内心活动，而把自己放在了裁判的位置。所以，赞扬并不总是有助于深化彼此的联系。</p><p>用非暴力沟通的方式表达感激时，我们只是为了庆祝他人的行为提升了我们的生活品质，而不是想获得任何回报。非暴力沟通表达感激的方式包含三个部分（先后次序不重要）：<br>1）对方做了什么事情使我们生活得到了改善；<br>2）我们有哪些需要得到了满足；<br>3）我们的心情怎么样？</p><blockquote><p>举个例子：<br>您写的这篇关于非暴力沟通的文章太棒了，我很欣喜，我一直在寻找与同事沟通的办法，这篇文章给了我很大启发。</p></blockquote><h2 id="如何接受别人的感激？"><a href="#如何接受别人的感激？" class="headerlink" title="如何接受别人的感激？"></a>如何接受别人的感激？</h2><p>在听到别人表达对我们的感激时，我们也许会觉得别扭。我们不知道自己是否真的那么好。我们甚至会担心别人对我们有所期待——特别是老师或经理试图通过赞扬来提高我们的学习和工作效率。此外，我们还可能担心在将来失去别人的赏识。</p><p>在别人表达感激时，人们通常有两种截然不同的反应。一种是自我膨胀，相信我们比别人优越；另一种是假谦虚，否定别人的欣赏，耸耸肩说：“哦，这没什么。”</p><p>如果能意识到我们的能力是生命赋予的，我们就能够同时避免自我膨胀和假谦虚。</p><h2 id="金句"><a href="#金句" class="headerlink" title="金句"></a>金句</h2><p>人们越是习惯于评定是非，他们就越倾向于追随权威，来获得正确和错误的标准。一旦专注于自身的感受和需要，我们就不再是好的奴隶和好属下。</p><p>我们越是将他人的不顺从看作是对我们的排斥，我们所表达的愿望就越有可能被看作是命令。这将导致恶性循环，因为一旦人们认为我们是在强迫他们，他们就会不太想满足我们的愿望。</p><p>通过运用非暴力沟通，我们不再试图分析自己或他人有什么毛病，而是用心去了解我们的需要，这样，我们的内心将逐渐变得平和。一旦我们发现自己心底深处的愿望，并采取积极的行动，我们将会重获生活的热情。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
      <tag>非暴力沟通</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES2021 新特性！</title>
    <link href="/2021/06/29/es2021-features/"/>
    <url>/2021/06/29/es2021-features/</url>
    
    <content type="html"><![CDATA[<h2 id="逻辑赋值运算符（Logical-Assignment-Operators）"><a href="#逻辑赋值运算符（Logical-Assignment-Operators）" class="headerlink" title="逻辑赋值运算符（Logical Assignment Operators）"></a>逻辑赋值运算符（Logical Assignment Operators）</h2><blockquote><p>TC39提案GitHub地址：<a href="https://github.com/tc39/proposal-logical-assignment">📖</a></p></blockquote><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 逻辑或赋值</span><br>x ||= y;<br>x || (x = y);<br><br><span class="hljs-comment">// 逻辑与赋值</span><br>x &amp;&amp;= y;<br>x &amp;&amp; (x = y);<br><br><span class="hljs-comment">// 逻辑空赋值</span><br>x ??= y;<br>x ?? (x = y);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> updateID = <span class="hljs-function"><span class="hljs-params">user</span> =&gt;</span> &#123;<br><br>  <span class="hljs-comment">// 传统写法</span><br>  <span class="hljs-keyword">if</span> (!user.id) user.id = <span class="hljs-number">1</span><br><br>  <span class="hljs-comment">// 或这样</span><br>  user.id = user.id || <span class="hljs-number">1</span><br><br>  <span class="hljs-comment">// 最新的逻辑或写法</span><br>  user.id ||= <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">config</span>(<span class="hljs-params">options</span>) </span>&#123;<br>  options.duration ??= <span class="hljs-number">100</span>;<br>  options.speed ??= <span class="hljs-number">25</span>;<br>  <span class="hljs-keyword">return</span> options;<br>&#125;<br><br>config(&#123; <span class="hljs-attr">duration</span>: <span class="hljs-number">125</span> &#125;); <span class="hljs-comment">// &#123; duration: 125, speed: 25 &#125;</span><br>config(&#123;&#125;); <span class="hljs-comment">// &#123; duration: 100, speed: 25 &#125;</span><br></code></pre></td></tr></table></figure><h3 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h3><p><img src="https://changjingli-blog.oss-cn-shanghai.aliyuncs.com//blog/image-20210702151020501YZLBS0JKCHUz.png" alt="image-20210702151020501"></p><h2 id="数字分隔符（Numeric-Separators）"><a href="#数字分隔符（Numeric-Separators）" class="headerlink" title="数字分隔符（Numeric Separators）"></a>数字分隔符（Numeric Separators）</h2><blockquote><p>为了提高数字可读性，可以在数字间使用_(U+005F)作为分隔符<a href="https://github.com/tc39/proposal-numeric-separator">📖</a></p></blockquote><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">10_0000_0000</span>            <span class="hljs-comment">// 十亿</span><br><span class="hljs-number">1_0147_5938.38</span>          <span class="hljs-comment">// 一亿多</span><br><br><span class="hljs-keyword">let</span> fee = <span class="hljs-number">123_00</span>;       <span class="hljs-comment">// ¥123 (12300分)</span><br><span class="hljs-keyword">let</span> fee = <span class="hljs-number">1_2300</span>;       <span class="hljs-comment">// ¥12,300 (显然1_2300可读性更好)</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">0.00_0001</span> <span class="hljs-comment">// 百万分之一</span><br><span class="hljs-number">1e10_000</span>  <span class="hljs-comment">// 10^10000</span><br><span class="hljs-number">0xA0_B0_C0</span>;<br><span class="hljs-number">0o2_2_5_6</span>;<br></code></pre></td></tr></table></figure><h3 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h3><ol><li>不允许连续超过一个下划线</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> n = 123__00; <span class="hljs-comment">// SyntaxError: Only one underscore is allowed as numeric separator</span><br></code></pre></td></tr></table></figure><ol start="2"><li>不能出现在数字结尾</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> n = 12300_;  <span class="hljs-comment">// SyntaxError: Numeric separators are not allowed at the end of numeric literals</span><br></code></pre></td></tr></table></figure><ol start="3"><li>不能在前导0后使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> n = 0_12300; <span class="hljs-comment">// SyntaxError: Numeric separator can not be used after leading 0.</span><br></code></pre></td></tr></table></figure><h3 id="浏览器兼容性-1"><a href="#浏览器兼容性-1" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h3><p><img src="https://changjingli-blog.oss-cn-shanghai.aliyuncs.com//blog/image-20210702163756434SLqfhm.png" alt="image-20210702163756434"></p><p><a href="https://caniuse.com/mdn-javascript_grammar_numeric_separators">最新兼容性 caniuse.com ➡️</a></p><h2 id="Promise-any-与-AggregateError"><a href="#Promise-any-与-AggregateError" class="headerlink" title="Promise.any 与 AggregateError"></a>Promise.any 与 AggregateError</h2><blockquote><p><code>Promise.any()</code>接收一个<code>Promise</code>可迭代对象，只要其中一个<code>Promise</code>被<code>resolve</code>，就返回那个<em>已成功</em>的<code>promise</code>。</p><p>不会像<code>Promise.all</code>等待其他<code>promise</code>全部完成，也不会像<code>Promise.race</code>那样总是返回第一个(resolve/reject)的<code>promise</code>。</p><p>如果没有 fulfilled (成功的) promise，Promise.any() 返回 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError">AggregateError</a> 错误。</p><hr><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any">Promise.any MDN地址 📖</a></li><li><a href="https://github.com/tc39/proposal-promise-any">Promise.any TC39地址 📖</a></li></ul></blockquote><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Promise</span>.any([<br>  fetch(<span class="hljs-string">&#x27;https://v8.dev/&#x27;</span>).then(<span class="hljs-function">() =&gt;</span> <span class="hljs-string">&#x27;home&#x27;</span>),<br>  fetch(<span class="hljs-string">&#x27;https://v8.dev/blog&#x27;</span>).then(<span class="hljs-function">() =&gt;</span> <span class="hljs-string">&#x27;blog&#x27;</span>),<br>  fetch(<span class="hljs-string">&#x27;https://v8.dev/docs&#x27;</span>).then(<span class="hljs-function">() =&gt;</span> <span class="hljs-string">&#x27;docs&#x27;</span>)<br>]).then(<span class="hljs-function">(<span class="hljs-params">first</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// Any of the promises was fulfilled.</span><br>  <span class="hljs-built_in">console</span>.log(first);<br>  <span class="hljs-comment">// → &#x27;home&#x27;</span><br>&#125;).catch(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// All of the promises were rejected.</span><br>  <span class="hljs-built_in">console</span>.log(error);<br>&#125;);<br><br><span class="hljs-comment">// ⬆️ 上述示例中，error为AggregateError</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> pErr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  reject(<span class="hljs-string">&quot;总是失败&quot;</span>);<br>&#125;);<br><br><span class="hljs-keyword">const</span> pSlow = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(resolve, <span class="hljs-number">500</span>, <span class="hljs-string">&quot;最终完成&quot;</span>);<br>&#125;);<br><br><span class="hljs-keyword">const</span> pFast = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(resolve, <span class="hljs-number">100</span>, <span class="hljs-string">&quot;很快完成&quot;</span>);<br>&#125;);<br><br><span class="hljs-built_in">Promise</span>.any([pErr, pSlow, pFast]).then(<span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(value);<br>  <span class="hljs-comment">// pFast fulfils first</span><br>&#125;)<br><span class="hljs-comment">// 期望输出: &quot;很快完成&quot;</span><br></code></pre></td></tr></table></figure><h3 id="浏览器兼容性-2"><a href="#浏览器兼容性-2" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h3><p><img src="https://changjingli-blog.oss-cn-shanghai.aliyuncs.com//blog/image-20210702164914515G3NaE7.png" alt="image-20210702164914515"></p><p><a href="https://caniuse.com/mdn-javascript_builtins_aggregateerror">最新兼容性 caniuse.com ➡️</a></p><h2 id="String-prototype-replaceAll"><a href="#String-prototype-replaceAll" class="headerlink" title="String.prototype.replaceAll"></a>String.prototype.replaceAll</h2><blockquote><p><strong><code>replaceAll()</code></strong> 方法返回一个<strong>新</strong>字符串，新字符串所有满足 <code>pattern</code> 的部分都已被<code>replacement</code> 替换。<code>pattern</code>可以是一个字符串或一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/RegExp"><code>RegExp</code></a>， <code>replacement</code>可以是一个字符串或一个在每次匹配被调用的函数。</p><p><strong>此方法不会修改调用对象，只是返回一个新的字符串。</strong> </p><hr><ul><li> <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll">String.prototype.replaceAll MDN文档地址 📖</a></li><li><a href="https://github.com/tc39/proposal-string-replaceall">String.prototype.replaceAll TC39提案地址 📖</a></li></ul></blockquote><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// const newStr = str.replaceAll(regexp|substr, newSubstr|function)</span><br><br><span class="hljs-string">&#x27;x&#x27;</span>.replace(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>);<br><span class="hljs-comment">// → &#x27;_x&#x27;</span><br><br><span class="hljs-string">&#x27;xxx&#x27;</span>.replace(<span class="hljs-regexp">/(?:)/g</span>, <span class="hljs-string">&#x27;_&#x27;</span>);<br><span class="hljs-comment">// → &#x27;_x_x_x_&#x27;</span><br><br><span class="hljs-string">&#x27;xxx&#x27;</span>.replaceAll(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>);<br><span class="hljs-comment">// → &#x27;_x_x_x_&#x27;</span><br><br><span class="hljs-comment">// 第一个参数为Regex时，必须加g标志，否则将会触发TypeError</span><br><span class="hljs-string">&#x27;xxx&#x27;</span>.replaceAll(<span class="hljs-regexp">/(?:)/</span>, <span class="hljs-string">&#x27;_&#x27;</span>);<br><span class="hljs-comment">// → Uncaught TypeError: String.prototype.replaceAll called with a non-global RegExp argument</span><br></code></pre></td></tr></table></figure><h3 id="浏览器兼容性-3"><a href="#浏览器兼容性-3" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h3><p><img src="https://changjingli-blog.oss-cn-shanghai.aliyuncs.com//blog/image-20210705141400937EE4x70.png" alt="image-20210705141400937"></p><p><a href="https://caniuse.com/mdn-javascript_builtins_string_replaceall">最新兼容性 caniuse.com ➡️</a></p><h2 id="WeakRef-和-FinalizationRegistry"><a href="#WeakRef-和-FinalizationRegistry" class="headerlink" title="WeakRef 和 FinalizationRegistry"></a>WeakRef 和 FinalizationRegistry</h2><blockquote><p>对于WeakRef 和 FinalizationRegistry的使用要慎重考虑，**<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef#avoid_where_possible">能不使用就尽量不要使用！</a>**</p><p><code>WeakRef</code>对象允许您保留对另一个对象的弱引用，而不会阻止被弱引用对象被GC回收；<code>FinalizationRegistry</code> 对象可以让你在对象被垃圾回收时请求一个回调。</p><hr><ul><li>WeakRefs 和 FinalizationRegistry TC39提案地址 <a href="https://github.com/tc39/proposal-weakrefs">📖</a></li><li>WeakRefs MDN地址 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef">📖</a></li><li>FinalizationRegistry MDN地址 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry">📖</a></li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> target = &#123;&#125;;<br><span class="hljs-keyword">let</span> wr = <span class="hljs-keyword">new</span> WeakRef(target);<br><br><span class="hljs-comment">//wr and target aren&#x27;t the same</span><br><br><br><span class="hljs-keyword">const</span> registry = <span class="hljs-keyword">new</span> FinalizationRegistry(<span class="hljs-function"><span class="hljs-params">heldValue</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// ....</span><br>&#125;);<br><br>registry.register(myObject, <span class="hljs-string">&quot;some value&quot;</span>, myObject);<br><span class="hljs-comment">// ... 当不再关心myObject的变化时，可以unregister</span><br>registry.unregister(myObject);<br></code></pre></td></tr></table></figure><h3 id="浏览器兼容性-4"><a href="#浏览器兼容性-4" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h3><p><img src="https://changjingli-blog.oss-cn-shanghai.aliyuncs.com//blog/image-20210705171947464YZ2zCv.png" alt="image-20210705171947464"></p><p><a href="https://caniuse.com/mdn-javascript_builtins_finalizationregistry">最新兼容性 caniuse.com ➡️</a></p><p><img src="https://changjingli-blog.oss-cn-shanghai.aliyuncs.com//blog/image-20210705172218276Cb8Niv.png" alt="image-20210705172218276"></p><p><a href="https://caniuse.com/mdn-javascript_builtins_finalizationregistry">最新兼容性 caniuse.com ➡️</a></p>]]></content>
    
    
    <categories>
      
      <category>技术研究</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES2021</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>navigator.clipboard API</title>
    <link href="/2021/02/02/navigator-clipboard-api/"/>
    <url>/2021/02/02/navigator-clipboard-api/</url>
    
    <content type="html"><![CDATA[<h2 id="navigator-clipboard-API"><a href="#navigator-clipboard-API" class="headerlink" title="navigator.clipboard API"></a>navigator.clipboard API</h2><p>Web开发者一直以来希望能够访问剪贴板，通过操作剪贴板，好的一方面是我们可以实现复制订单号、读取用户复制的吱口令等方便用户的功能；坏的一面是开发者可以复制恶意文本，使用户可能不小心粘贴到表单，使其发生财产或其他损失等等。</p><p>过去我们通过<code>document.execCommand(&#39;copy&#39;)</code>来完成复制的功能，但这是不可靠的。<code>navigator.clipboard</code>API提供异步<code>readText</code>和<code>writeText</code><br>方法管理剪贴板数据，通过以下代码看它是如何工作的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 往剪贴板写数据</span><br><span class="hljs-built_in">document</span>.body.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">async</span> e =&gt; &#123;<br>    <span class="hljs-keyword">await</span> navigator.clipboard.writeText(<span class="hljs-string">&#x27;hello world&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 从剪贴板读数据</span><br><span class="hljs-built_in">document</span>.body.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">async</span> e =&gt; &#123;<br>    <span class="hljs-keyword">const</span> text = <span class="hljs-keyword">await</span> navigator.clipboard.readText();<br>    alert(<span class="hljs-string">`text: <span class="hljs-subst">$&#123;text&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><h3 id="1-readText和writeText使用起来这么方便，我可以在任意地方调用navigator-clipboard-API吗？"><a href="#1-readText和writeText使用起来这么方便，我可以在任意地方调用navigator-clipboard-API吗？" class="headerlink" title="1. readText和writeText使用起来这么方便，我可以在任意地方调用navigator.clipboard API吗？"></a>1. <code>readText</code>和<code>writeText</code>使用起来这么方便，我可以在任意地方调用navigator.clipboard API吗？</h3><p>不能，出于浏览器安全策略考虑，规范表明需在<strong>由用户主动触发的事件中</strong>使用，类似微信用户信息授权机制。实际测试过程中发现，打开用到剪贴板的页面时，Chrome 88提示剪贴板权限，授予权限后，可以在<em>任意</em>处运行；Safari<br>14.0.3 打开页面直接报错，提示<code>Unhandled Promise Rejection: NotAllowedError: The request is not allowed by the user agent or the platform in the current context, possibly because the user denied permission.</code><br>，放在<code>click</code>、<code>touchstart</code>之类callback中没有问题。</p><h3 id="2-如果用户拒绝剪贴板权限，程序会异常吗？"><a href="#2-如果用户拒绝剪贴板权限，程序会异常吗？" class="headerlink" title="2. 如果用户拒绝剪贴板权限，程序会异常吗？"></a>2. 如果用户拒绝剪贴板权限，程序会异常吗？</h3><p>不会，<code>readText</code>和<code>writeText</code>都是异步的，异常行为与Promise类似。如果没有剪贴板授权，会得到<code>Promise Rejection</code>报错，可以通过<code>.catch</code>或者<code>try&#123;&#125; catch &#123;&#125;</code>优雅处理未授权情况。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API">Clipboard API - MDN</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术研究</category>
      
    </categories>
    
    
    <tags>
      
      <tag>navigator.clipboard</tag>
      
      <tag>Clipboard</tag>
      
      <tag>剪贴板</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web前端的现状与未来</title>
    <link href="/2020/09/15/about-web-now-and-future/"/>
    <url>/2020/09/15/about-web-now-and-future/</url>
    
    <content type="html"><![CDATA[<h2 id="Web前端的发展历史"><a href="#Web前端的发展历史" class="headerlink" title="Web前端的发展历史"></a>Web前端的发展历史</h2><h3 id="Web前端的由来"><a href="#Web前端的由来" class="headerlink" title="Web前端的由来"></a>Web前端的由来</h3><p>1991年8月，Tim Berners-Lee发布了第一个简单的，基于文本，包含几个链接的网站。但此后的网站发展一直很缓慢，这是因为早期的网页完全由单调地文本和图片所构成，对人们而言，毫无吸引力。</p><p>到了2005年，互联网开始进入Web2.0时代，由于AJAX技术的出现，各种类似桌面软件的Web应用开始大量涌现。由此，网站建设发生了巨大的变革。与此同时，“前端”这个词开始在国内逐渐流行开来。</p><h3 id="Web前端简介"><a href="#Web前端简介" class="headerlink" title="Web前端简介"></a>Web前端简介</h3><p>前端即网站前台部分，运行在PC端、移动端等浏览器上展现给用户浏览的网页。相反存储用户信息、业务数据的服务端通常称之为后端。</p><p>前端这个词是从网页制作演变过来的，名称上有明显时代特征。在Web 1.0时代，网站基本上都是静态的，加上用户使用网站以浏览为主。开发方式基本上前端table布局，后端ASP为主。在Web 2.0时代，随着HTML、CSS的规范得以标准化，此时网站前端开始改用DIV+CSS布局，后端使用ASP、ASP.NET、JAVA、PHP等语言。</p><p>到现在，前端技术已经发展到HTML5、CSS3、EcmaScript6。前后端的协作模式也开始采用前后端分离模式，相对于传统的开发方式，前后端分离的优势在于前后端团队可以并行开发，两端业务独立升级且不会为对方带来额外影响。</p><h2 id="Web前端的技术"><a href="#Web前端的技术" class="headerlink" title="Web前端的技术"></a>Web前端的技术</h2><p>Web三剑客：HTML、CSS、JavaScript。</p><p>我将他们三个之间的关系比喻为：只有HTML的网站是毛坯房，加上CSS就是精装修，再加上JavaScript那就是带有智能家居系统的豪宅。</p><p>HTML（HyperText Markup Language）是超文本标记语言，最初的HTML是Tim Berners-Lee为<strong>规范科研文档格式</strong>制定的，用来书写网页结构。我们常说的HTML5（H5）于2008年发布，泛指<strong>下一代</strong>HTML规范（不会有H6、H7、H8……）。</p><p>CSS（Cascading Style Sheets）是层叠样式表，负责控制页面表现。我们常说的CSS3于2001年完成了工作草案，同样泛指<strong>下一代</strong>CSS规范（不会有CSS4、CSS5……）。</p><p>JavaScript官方名称是EcmaScript，负责控制页面交互，比如点击、轮播之类的。目前最新版本是第6版，简称ES6。同样ES6也代表下一代EcmaScript规范。</p><blockquote><p><strong>ECMAScript 和 JavaScript 的关系</strong></p><p>一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系？</p><p>要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。</p><p>该标准从一开始就是针对 JavaScript 语言制定的，但是之所以不叫 JavaScript，有两个原因。一是商标，Java 是 Sun 公司的商标，根据授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 本身也已经被 Netscape 公司注册为商标。二是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。</p><p>因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 JScript 和 ActionScript）。日常场合，这两个词是可以互换的。</p><p>摘自 <a href="http://es6.ruanyifeng.com/#docs/intro#ECMAScript-%E5%92%8C-JavaScript-%E7%9A%84%E5%85%B3%E7%B3%BB">阮一峰ES6入门 - ECMAScript-和-JavaScript-的关系</a></p></blockquote><h2 id="Web前端开发的发展方向"><a href="#Web前端开发的发展方向" class="headerlink" title="Web前端开发的发展方向"></a>Web前端开发的发展方向</h2><p>业内前端开发人员基本有以下工作方向，方向不分好坏，只是业务不同而已，<strong>技术的本质是要为业务服务</strong>。以下方向在实际工作中会出现夹杂的情况，都是正常现象，越小地公司夹杂越严重。</p><h3 id="界面展现用户体验与可访问方向"><a href="#界面展现用户体验与可访问方向" class="headerlink" title="界面展现用户体验与可访问方向"></a>界面展现用户体验与可访问方向</h3><p>该方向典型产品如淘宝网、京东网、各大公司官网等。</p><p>这也是大多数Web前端工程师从事的方向，俗称“页面仔”。业内的大多数最佳实践基本来源于此：如Vue、React、Angular等JS框架；如BootStrap、 Element UI、Ant Design等UI框架；如Nodejs、Webpack、Glup等脚手架工具。</p><p>好看是产品的最低要求、好看加好用才是真正意义上的产品。对产品糟糕的第一印象，会流失掉大部分客户，这就是为什么大公司不遗余力地招聘优秀前端的原因。</p><p>可访问方向又称为无障碍方向，这是在国内兴起比较晚的技术。主要是服务于色盲、色弱或视弱的用户。</p><h3 id="偏后的js-nodejs方向"><a href="#偏后的js-nodejs方向" class="headerlink" title="偏后的js/nodejs方向"></a>偏后的js/nodejs方向</h3><p>该方向典型产品如Express、第三方NPM包等。</p><p>众所周知，由于现在SPA模式流行，前后端分离的网页是没办法进行SEO的，这时候只能通过SSR完成。</p><p>前端常用的脚手架如Webpack、Glup等，常用的NPM包都是这个方向的同学来完成的。</p><h3 id="audio-video音视频富媒体方向"><a href="#audio-video音视频富媒体方向" class="headerlink" title="audio/video音视频富媒体方向"></a>audio/video音视频富媒体方向</h3><p>该方向有如优酷、爱奇艺、B站、网易云等服务用户的产品，也有腾讯云、阿里云等服务开发者的产品，主要用来开发直播之类的功能。</p><p>该方向主要提供富媒体解决方案。业内比较著名的框架有Video.js，Flv.js。</p><!--（这一块不是我经常涉猎的方向，描述有点少😅）--><h3 id="SVG-Canvas-WebGL动效创意与数据可视化方向"><a href="#SVG-Canvas-WebGL动效创意与数据可视化方向" class="headerlink" title="SVG/Canvas/WebGL动效创意与数据可视化方向"></a>SVG/Canvas/WebGL动效创意与数据可视化方向</h3><p>该方向主要有Google Charts、ECharts、Highcharts、D3等框架。</p><p>数据可视化方向最常用的场景有BI（Business Intelligence，商业智能）方向、Dashboard方向等，以一个直观的形式展示数据，用来辅助决策的制定。</p><h3 id="工具建设文档管理内部建站的前端运维方向"><a href="#工具建设文档管理内部建站的前端运维方向" class="headerlink" title="工具建设文档管理内部建站的前端运维方向"></a>工具建设文档管理内部建站的前端运维方向</h3><p>该方向主要用GitBook、Github Pages、Hexo等框架。</p><h2 id="Web前端的技能栈"><a href="#Web前端的技能栈" class="headerlink" title="Web前端的技能栈"></a>Web前端的技能栈</h2><p>欲成为专业的前端工程师，以下技能栈必不可少。不要被吓到，工作过程中会慢慢接触到的。这是每一名优秀前端工程师的必由之路。</p><p>大图地址：<a href="https://image-static.segmentfault.com/262/018/2620180636-5a4b946c2426b">https://image-static.segmentfault.com/262/018/2620180636-5a4b946c2426b</a></p><p><img src="https://image-static.segmentfault.com/262/018/2620180636-5a4b946c2426b" alt="img"></p><h2 id="Web前端的未来"><a href="#Web前端的未来" class="headerlink" title="Web前端的未来"></a>Web前端的未来</h2><h3 id="Web前端的未来发展"><a href="#Web前端的未来发展" class="headerlink" title="Web前端的未来发展"></a>Web前端的未来发展</h3><p>主要体现在前端新领域的出现。除了目前浏览器、服务器、移动端上的应用开发技术变革和探索外，前端也出现新的应用场景。比如VR、物联网Web化、Web人工智能等。前端不仅自身发展快，推广使用也极其迅速，例如移动互联网Web的普及也就两三年时间。 近几年，Web VR和物联网Web化的概念渐渐出现，目前物联网Web化的草案已经形成；Web支付的API正在实施，Chrome 81将支持Web支付。</p><h3 id="Web前端的未来值得期待"><a href="#Web前端的未来值得期待" class="headerlink" title="Web前端的未来值得期待"></a>Web前端的未来值得期待</h3><p>现在的Web前端开发越来越注重用户体验。无论底层技术的支持上，还是跨平台兼容的需求上，都为迎来前端的繁荣局面做好了准备。前端工程师的位置会越来越重要，相信 Web前端开发的明天会更好。</p><p>前端不仅可以开发网页，在跨平台应用上仍有不俗的表现。如Facebook开源的React Native跨平台开发框架，一次编写即可生成iOS、Android原生应用；随着PWA技术的出现，web应用不再受网络环境束缚。</p><blockquote><p>凡是可以用 JavaScript 来写的应用，最终都会用 JavaScript 来写。</p><p>——Atwood定律（Jeff Atwood在2007年提出）</p></blockquote><h2 id="我是如何看待Web前端开发一职的"><a href="#我是如何看待Web前端开发一职的" class="headerlink" title="我是如何看待Web前端开发一职的"></a>我是如何看待Web前端开发一职的</h2><p>前端是集<strong>程序员的严谨</strong>与<strong>设计师的艺术</strong>融合的一个职位，是离目标用户最近的开发岗位，是产品与用户之间的桥梁。</p><p>欲做好前端一职，能够与项目组中各个角色正常沟通，要懂一些设计的知识，以能够把握到设计师的细节；要懂一些交互的知识，以能够把握到产品经理的体验；要懂一些后端的知识，以能够与后端同学快速排查问题……</p><p>Web前端方向那么多，找准适合自己的最重要，一专多精才符合市场需求。</p><p>以上，感谢阅读。</p>]]></content>
    
    
    <categories>
      
      <category>思考总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作思考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目基础框架升级小记</title>
    <link href="/2020/08/27/upgrade-sd-base-framework/"/>
    <url>/2020/08/27/upgrade-sd-base-framework/</url>
    
    <content type="html"><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>由于本项目由<code>umi2</code>搭建完成，出于后期配置方便、可维护性，提高代码编译速度的考虑，特此升级<code>umi</code>框架。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="升级步骤"><a href="#升级步骤" class="headerlink" title="升级步骤"></a>升级步骤</h3><h4 id="1-明确升级范围"><a href="#1-明确升级范围" class="headerlink" title="1. 明确升级范围"></a>1. 明确升级范围</h4><p>项目依赖应是<strong>自下向上</strong>升级，先升级底层运行框架，再升级业务中需要用到的依赖；修改范围由小到大，优先修改配置文件、然后再改view层代码，这样容易排查bug。</p><h4 id="2-检查本地环境"><a href="#2-检查本地环境" class="headerlink" title="2. 检查本地环境"></a>2. 检查本地环境</h4><p>框架对node、npm等会有最低版本要求，如umi需要node<code>&gt;= 10.13.0</code></p><h4 id="3-执行升级步骤"><a href="#3-执行升级步骤" class="headerlink" title="3. 执行升级步骤"></a>3. 执行升级步骤</h4><ol><li>备份代码，如切新分支</li><li>通过CLI创建一份最新依赖版本的空项目<ol><li>用于与旧项目对照差异</li><li>明确新版本各种dependencies使用情况</li></ol></li><li>按照框架迁移指南步骤操作</li><li>检查代码运行情况</li><li>遇到报错时<ol><li>优先看看空项目里是如何配置的，因为框架会把一些配置“透明化”。如<code>umi@3</code>把babel配置透明化</li><li>Google一下遇到的报错</li></ol></li><li>完成</li></ol><h3 id="核心代码diff"><a href="#核心代码diff" class="headerlink" title="核心代码diff"></a>核心代码diff</h3><h4 id="1-package-json"><a href="#1-package-json" class="headerlink" title="1. package.json"></a>1. package.json</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs diff">  &#123;<br>    &quot;private&quot;: true,<br>    &quot;scripts&quot;: &#123;<br>      &quot;start&quot;: &quot;umi dev&quot;,<br>      &quot;build&quot;: &quot;umi build&quot;,<br><span class="hljs-deletion">-     &quot;test&quot;: &quot;umi test&quot;,</span><br><span class="hljs-addition">+     &quot;test&quot;: &quot;umi-test&quot;,</span><br><span class="hljs-deletion">-     &quot;lint&quot;: &quot;eslint --ext .js src&quot;,</span><br>      &quot;precommit&quot;: &quot;lint-staged&quot;,<br><span class="hljs-addition">+     &quot;prettier&quot;: &quot;prettier --write &#x27;**/*.&#123;js,jsx,tsx,ts,less,md,json&#125;&#x27;&quot;,</span><br><span class="hljs-addition">+     &quot;test:coverage&quot;: &quot;umi-test --coverage&quot;</span><br>      &quot;analyz&quot;: &quot;set NODE_ENV=production npm_config_report=true npm run start&quot;<br>    &#125;,<br>    &quot;dependencies&quot;: &#123;<br>      &quot;@ant-design/icons&quot;: &quot;^4.0.2&quot;,<br>      &quot;@ant-design/pro-layout&quot;: &quot;^4.6.1&quot;,<br>      &quot;@antv/data-set&quot;: &quot;^0.10.2&quot;,<br><span class="hljs-deletion">-     &quot;@babel/core&quot;: &quot;^7.6.4&quot;,</span><br><span class="hljs-deletion">-     &quot;@babel/preset-env&quot;: &quot;^7.6.3&quot;,</span><br><span class="hljs-deletion">-     &quot;@sunflower-antd/form-table&quot;: &quot;0.0.0-alpha.6&quot;,</span><br><span class="hljs-deletion">-     &quot;@testing-library/jest-dom&quot;: &quot;^4.1.2&quot;,</span><br><span class="hljs-deletion">-     &quot;@testing-library/react-hooks&quot;: &quot;^3.1.1&quot;,</span><br>      &quot;@types/lodash.debounce&quot;: &quot;^4.0.6&quot;,<br>      &quot;@types/lodash.isequal&quot;: &quot;^4.5.5&quot;,<br><span class="hljs-deletion">-     &quot;@uform/antd&quot;: &quot;^0.3.11&quot;,</span><br><span class="hljs-deletion">-     &quot;@umijs/hooks&quot;: &quot;^1.5.1-beta.0&quot;,</span><br><span class="hljs-addition">+     &quot;@umijs/preset-react&quot;: &quot;^1.6.2&quot;,</span><br><span class="hljs-addition">+     &quot;@umijs/test&quot;: &quot;^3.2.16&quot;,</span><br>      &quot;ant-design-pro&quot;: &quot;^2.3.2&quot;,<br>      &quot;antd&quot;: &quot;^3.19.3&quot;,<br>      &quot;bizcharts&quot;: &quot;^3.5.3-beta.0&quot;,<br>      &quot;bizcharts-plugin-slider&quot;: &quot;^2.1.1-beta.1&quot;,<br>      &quot;classnames&quot;: &quot;^2.2.6&quot;,<br>      &quot;compression-webpack-plugin&quot;: &quot;^3.1.0&quot;,<br>      &quot;copy-to-clipboard&quot;: &quot;^3.2.0&quot;,<br><span class="hljs-deletion">-     &quot;dva&quot;: &quot;^2.5.0-beta.2&quot;,</span><br><span class="hljs-addition">+     &quot;dva&quot;: &quot;^2.6.0-beta.20&quot;,</span><br>      &quot;echarts&quot;: &quot;^4.7.0&quot;,<br>      &quot;html2canvas&quot;: &quot;^1.0.0-rc.5&quot;,<br>      &quot;immer&quot;: &quot;^3.2.0&quot;,<br><span class="hljs-deletion">-     &quot;lodash-decorators&quot;: &quot;^6.0.1&quot;,</span><br>      &quot;lodash.debounce&quot;: &quot;^4.0.8&quot;,<br>      &quot;lodash.isequal&quot;: &quot;^4.5.0&quot;,<br>      &quot;memoize-one&quot;: &quot;^5.0.0&quot;,<br><span class="hljs-deletion">-     &quot;mockhs&quot;: &quot;^1.1.9&quot;,</span><br>      &quot;moment&quot;: &quot;^2.24.0&quot;,<br>      &quot;monaco-editor&quot;: &quot;^0.19.2&quot;,<br>      &quot;numeral&quot;: &quot;^2.0.6&quot;,<br>      &quot;particles.js&quot;: &quot;^2.0.0&quot;,<br>      &quot;path-to-regexp&quot;: &quot;^3.0.0&quot;,<br>      &quot;qrcode.react&quot;: &quot;^1.0.0&quot;,<br>      &quot;qs&quot;: &quot;^6.6.0&quot;,<br>      &quot;react&quot;: &quot;^16.12.0&quot;,<br>      &quot;react-custom-scrollbars&quot;: &quot;^4.2.1&quot;,<br>      &quot;react-document-title&quot;: &quot;^2.0.3&quot;,<br>      &quot;react-dom&quot;: &quot;^16.12.0&quot;,<br>      &quot;react-fittext&quot;: &quot;^1.0.0&quot;,<br>      &quot;react-if&quot;: &quot;^3.4.3&quot;,<br>      &quot;react-infinite-scroller&quot;: &quot;^1.2.4&quot;,<br>      &quot;react-monaco-editor&quot;: &quot;^0.33.0&quot;,<br>      &quot;react-particles-js&quot;: &quot;^2.5.1&quot;,<br><span class="hljs-deletion">-     &quot;react-scripts&quot;: &quot;^3.4.0&quot;,</span><br><span class="hljs-deletion">-     &quot;react-testing-library&quot;: &quot;^8.0.1&quot;,</span><br><span class="hljs-deletion">-     &quot;reactparticles.js&quot;: &quot;^1.1.6&quot;,</span><br>      &quot;redux&quot;: &quot;^4.0.1&quot;,<br><span class="hljs-deletion">-     &quot;redux-undo&quot;: &quot;^0.6.1&quot;,</span><br>      &quot;umi-request&quot;: &quot;^1.0.0&quot;,<br><span class="hljs-deletion">-     &quot;webpack-bundle-analyzer&quot;: &quot;^3.8.0&quot;</span><br>    &#125;,<br>    &quot;devDependencies&quot;: &#123;<br><span class="hljs-deletion">-     &quot;@testing-library/react&quot;: &quot;^9.3.0&quot;,</span><br><span class="hljs-deletion">-     &quot;@types/jest&quot;: &quot;^24.0.21&quot;,</span><br><span class="hljs-deletion">-     &quot;@types/react&quot;: &quot;^16.8.19&quot;,</span><br><span class="hljs-deletion">-     &quot;babel-eslint&quot;: &quot;^9.0.0&quot;,</span><br>      &quot;compression-webpack-plugin&quot;: &quot;^3.1.0&quot;,<br><span class="hljs-deletion">-     &quot;enzyme&quot;: &quot;^3.10.0&quot;,</span><br><span class="hljs-deletion">-     &quot;eslint&quot;: &quot;^5.4.0&quot;,</span><br><span class="hljs-deletion">-     &quot;eslint-config-umi&quot;: &quot;^1.4.0&quot;,</span><br><span class="hljs-deletion">-     &quot;eslint-plugin-flowtype&quot;: &quot;^2.50.0&quot;,</span><br><span class="hljs-deletion">-     &quot;eslint-plugin-import&quot;: &quot;^2.14.0&quot;,</span><br><span class="hljs-deletion">-     &quot;eslint-plugin-jsx-a11y&quot;: &quot;^5.1.1&quot;,</span><br><span class="hljs-deletion">-     &quot;eslint-plugin-react&quot;: &quot;^7.11.1&quot;,</span><br><span class="hljs-deletion">-     &quot;husky&quot;: &quot;^0.14.3&quot;,</span><br><span class="hljs-deletion">-     &quot;jest&quot;: &quot;^24.9.0&quot;,</span><br><span class="hljs-deletion">-     &quot;jest-puppeteer&quot;: &quot;^4.2.0&quot;,</span><br>      &quot;lint-staged&quot;: &quot;^7.2.2&quot;,<br>      &quot;monaco-editor-webpack-plugin&quot;: &quot;^1.8.2&quot;,<br><span class="hljs-addition">+     &quot;prettier&quot;: &quot;^2.1.1&quot;,</span><br><span class="hljs-deletion">-     &quot;react-test-renderer&quot;: &quot;^16.7.0&quot;,</span><br><span class="hljs-deletion">-     &quot;redux-saga-test-plan&quot;: &quot;^4.0.0-beta.2&quot;,</span><br><span class="hljs-deletion">-     &quot;ts-loader&quot;: &quot;^6.2.1&quot;,</span><br><span class="hljs-deletion">-     &quot;typescript&quot;: &quot;^3.6.4&quot;,</span><br><span class="hljs-deletion">-     &quot;umi&quot;: &quot;^2.4.2&quot;,</span><br><span class="hljs-addition">+     &quot;umi&quot;: &quot;^3.2.17&quot;,</span><br><span class="hljs-deletion">-     &quot;umi-plugin-react&quot;: &quot;^1.8.4&quot;,</span><br><span class="hljs-addition">+     &quot;webpack-bundle-analyzer&quot;: &quot;^3.8.0&quot;,</span><br><span class="hljs-addition">+     &quot;yorkie&quot;: &quot;^2.0.0&quot;  </span><br>    &#125;,<br><span class="hljs-addition">+   &quot;gitHooks&quot;: &#123;</span><br><span class="hljs-addition">+     &quot;pre-commit&quot;: &quot;lint-staged&quot;</span><br><span class="hljs-addition">+   &#125;,</span><br>    &quot;lint-staged&quot;: &#123;<br><span class="hljs-deletion">-     &quot;*.&#123;js,jsx&#125;&quot;: [</span><br><span class="hljs-deletion">-       &quot;eslint&quot;,</span><br><span class="hljs-deletion">-       &quot;git add&quot;</span><br><span class="hljs-addition">+     &quot;*.&#123;js,jsx,less,md,json&#125;&quot;: [</span><br><span class="hljs-addition">+       &quot;prettier --write&quot;</span><br><span class="hljs-addition">+     ],</span><br><span class="hljs-addition">+     &quot;*.ts?(x)&quot;: [</span><br><span class="hljs-addition">+       &quot;prettier --parser=typescript --write&quot;</span><br>      ]<br>    &#125;,<br>    &quot;engines&quot;: &#123;<br><span class="hljs-deletion">-     &quot;node&quot;: &quot;&gt;=8.0.0&quot;</span><br><span class="hljs-addition">+     &quot;node&quot;: &quot;&gt;=10.13.0&quot;</span><br>    &#125;,<br><span class="hljs-deletion">-    &quot;jest&quot;: &#123;</span><br><span class="hljs-deletion">-        &quot;transform&quot;: &#123;</span><br><span class="hljs-deletion">-          &quot;^.+\\.tsx?$&quot;: &quot;ts-jest&quot;,</span><br><span class="hljs-deletion">-          &quot;^.+\\.jsx?$&quot;: &quot;babel-jest&quot;</span><br><span class="hljs-deletion">-        &#125;,</span><br><span class="hljs-deletion">-        &quot;transformIgnorePatterns&quot;: [</span><br><span class="hljs-deletion">-          &quot;&lt;rootDir&gt;/node_modules/(moment|core-js|babel-runtime|regenerator-runtime|lodash)/&quot;</span><br><span class="hljs-deletion">-     ],</span><br><span class="hljs-deletion">-     &quot;collectCoverage&quot;: false,</span><br><span class="hljs-deletion">-     &quot;testRegex&quot;: &quot;(/__tests__/.*|(\\.|/)(test|spec))\\.(tsx?)$&quot;,</span><br><span class="hljs-deletion">-     &quot;moduleFileExtensions&quot;: [</span><br><span class="hljs-deletion">-       &quot;ts&quot;,</span><br><span class="hljs-deletion">-       &quot;js&quot;</span><br><span class="hljs-deletion">-     ],</span><br><span class="hljs-deletion">-     &quot;globals&quot;: &#123;</span><br><span class="hljs-deletion">-       &quot;ts-jest&quot;: &#123;</span><br><span class="hljs-deletion">-         &quot;skipBabel&quot;: true</span><br><span class="hljs-deletion">-       &#125;</span><br><span class="hljs-deletion">-     &#125;,</span><br><span class="hljs-deletion">-     &quot;testPathIgnorePatterns&quot;: [</span><br><span class="hljs-deletion">-       &quot;/(node_modules|lib|coverage|types)/&quot;</span><br><span class="hljs-deletion">-     ]</span><br><span class="hljs-deletion">-   &#125;</span><br><span class="hljs-deletion">- &#125;</span><br><br></code></pre></td></tr></table></figure><h4 id="代码层"><a href="#代码层" class="headerlink" title="代码层"></a>代码层</h4><p>不再保留 umi/xxx 的接口，全部从 umi 中 import。由于调用router的地方太多，所以用ES6别名处理了。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">- import Link from &#x27;umi/link&#x27;;</span><br><span class="hljs-addition">+ import &#123; Link &#125; from &#x27;umi&#x27;;</span><br><br><span class="hljs-deletion">- import router from &#x27;umi/router&#x27;;</span><br><span class="hljs-addition">+ import &#123; history as router &#125; from &#x27;umi&#x27;;</span><br></code></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>项目在有<code>src/.umi</code>缓存的情况下，构建速度由86秒减到53秒。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li><p>控制台waring <code>devScripts.js:5836 Warning: Please use `require(&quot;history&quot;).createHashHistory` instead of `require(&quot;history/createHashHistory&quot;)`. Support for the latter will be removed in the next major release.</code> </p><p>See：<a href="https://github.com/dvajs/dva/issues/2141">https://github.com/dvajs/dva/issues/2141</a></p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由于umi相对成熟，升级的过程比较简单，碰到的问题也不多。</p><p>好多人问：其实编译也没有快多少，为什么要花这么大精力去升级呢？我是从以下角度考虑的：</p><ol><li><p><a href="https://baike.baidu.com/item/%E9%80%9F%E5%BA%A6%E7%BB%8F%E6%B5%8E">速度经济</a></p><p>更快的构建速度意味着可以更快的发布。如果你的项目与电商挂钩，一旦遇到漏洞，更快发布意味着可以及时止损。</p></li><li><p>升级框架的经验</p><p>结果都是不值钱的，重要的是过程，是你解决问题所引发的思考。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>思考总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dva</tag>
      
      <tag>umi</tag>
      
      <tag>项目升级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次模拟面试的体会</title>
    <link href="/2020/02/25/experience-about-mock-interview/"/>
    <url>/2020/02/25/experience-about-mock-interview/</url>
    
    <content type="html"><![CDATA[<p>缘起这篇意料之外的 <a href="https://segmentfault.com/a/1190000021761594?_ea=31612559">热帖</a>，看完后热血沸腾。磐冲大佬希望帮助到正在前端领域努力的人，因此自己毫不犹豫地参与了他组织的模拟面试，以此对自己有更客观、公正的认识。</p><h2 id="模拟面试过程"><a href="#模拟面试过程" class="headerlink" title="模拟面试过程"></a>模拟面试过程</h2><p>一个多小时的面试很快就结束了，通过对我正进行的项目为基础，深挖自己对业务的熟悉程度、对技术的前瞻性考量。说自己对项目总体上认识比较清晰，尽管有些地方不是自己负责的，并给出以下三点点评：</p><h3 id="1-技术基础"><a href="#1-技术基础" class="headerlink" title="1. 技术基础"></a>1. <strong>技术基础</strong></h3><p>   通过对问卷显示这一功能，提出一系列问题。自己思考的深度不够，一方面是意识不到位的问题、一方面也是缺乏经验的一个表现。典型的<em>程序员思维</em>——需要一名产品站在背后推动自己。</p><h3 id="2-技术底层"><a href="#2-技术底层" class="headerlink" title="2. 技术底层"></a>2. <strong>技术底层</strong></h3><p>   技术底层知识需要积累。这是每一位对技术有渴望的人必由之路，个人亦认同理论基础决定实践高度。</p><h3 id="3-激情"><a href="#3-激情" class="headerlink" title="3. 激情"></a>3. <strong>激情</strong></h3><p>   所谓“激情”，就是你真正在思考这个问题，并给出自己的理解或建议。与第一点类似，自己在面试过程中是一问一答，是面试官在替我深挖一个功能点，而不是我自己主动进行思考。<em>一件事过于复杂或者项目周期紧张，不能成为自己不做的理由</em>，否则今年3.5，明年3.25，后年自己滚蛋……</p><h2 id="自我反思"><a href="#自我反思" class="headerlink" title="自我反思"></a>自我反思</h2><p>与大佬的交谈受益匪浅，尤其是“激情”这一点使我醍醐灌顶、感慨万千。</p><p>他提到一件小事——在阿里，如果你对自己所做的事情有激情，可以就一个问题与人深入沟通，你会非常受欢迎。这件事使我想起读中专的时候，因为对一个问题过于痴迷，把专业课老师问到尴尬的场景。为什么出来工作之后自己反而丢失了这项技能呢？反思原因如下：</p><ul><li>一是自己对专业的渴求不如从前、没有那种如饥似渴地热情了；</li><li>二是工作氛围使然。没有深入讨论的氛围，拿到需求就是干，长久以往自己被同化；</li><li>三是公司性质决定。外包公司没有决定权、前端更没有决定权了。</li></ul><p>针对以上的反思的原因，对自己提出以下要求：</p><ol><li>坚持独立思考。通过提出自己的见解，与人交流的方式来完善自己。</li><li>坚持写作。自己内心活动比较丰富，要通过写作的方式将它表达出来，表达的过程也是想法完善的过程。</li><li>提升自己的硬实力（底层知识能力、前沿知识能力等）</li><li>提升自己的软实力（时间管理、审美能力、写作能力等）</li></ol><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>对标阿里外部同等经验人群，大佬认为自己属于中等偏上，尽管如此自己仍需戒骄戒躁，保持对技术的热情与敬畏之心。</p><p>对技术的渴望使我想跟更优秀的人一起共事，事实证明：一支氛围良好的技术团队，往往具有培养hacker的土壤。hacker或是优秀技术人员的体现，往往是由集体形式出现而不是个体形式出现。理由很简单，她们受到同样氛围的影响养成了同样的性格和气质。这样的土壤正是自己所渴求的，自己加倍努力得以早日进入这样的土壤“茁壮成长”。</p>]]></content>
    
    
    <categories>
      
      <category>思考总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工作思考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于提升开发效率的一些思考</title>
    <link href="/2020/02/24/thinking-about-improving-development-efficiency/"/>
    <url>/2020/02/24/thinking-about-improving-development-efficiency/</url>
    
    <content type="html"><![CDATA[<p>一直以来，感觉自己工作比较“慢”。跟周围同事确认，得到类似的答案。经过一段时间的思考，遂决定动笔记录下自己的思考。</p><h2 id="正确理解需求"><a href="#正确理解需求" class="headerlink" title="正确理解需求"></a>正确理解需求</h2><p>再牛的技术也拯救不了产品上的失败，议论文写成了记述文也一样不会得高分。</p><p>正确理解PM的需求，可以通过口述、反问等形式确认自己的理解是否正确。每一个岗位、每一个人的所处环境不一样，大家的“常识”也不一定在一条水平线上。反复确认是非常有必要的，尤其是成员处于磨合阶段。</p><h2 id="不要过度优化"><a href="#不要过度优化" class="headerlink" title="不要过度优化"></a>不要过度优化</h2><p>我在开发的过程中，经常会过于重视用户体验。本着把最好但体验留给用户的原则，但经常因为这个耽误进度。最典型地是一张登录页面做了一天……</p><p>不是说开发过程中注重用户体验不好，而是在确保基本功能已经完成的情况下。客户着急发版本，你这边还在因为纠结细节上的体验仍未开发页面，即使你的技术再好，代码写得再优雅，怕是都会留下“不靠谱”的印象。</p><p>目前给自己标准如下：</p><p><strong>UI上</strong>遵循设计四大原则。有设计稿按照设计稿开发，没有设计稿参考类似结构的页面风格。保证页面美观、无明显样式问题。</p><p><strong>功能上</strong>完成项目要求的功能后，视情况考虑是否继续深度优化。避免因为一个节点导致后续进度delay。</p><p><strong>代码上</strong>仍严于律己，规规矩矩给变量命名、写好注释，不能给自己、给后来者埋雷。</p><h2 id="减少环境干扰"><a href="#减少环境干扰" class="headerlink" title="减少环境干扰"></a>减少环境干扰</h2><p>网上类似**<em>没事儿不要去打断一个程序员**</em>的帖子有很多，不再赘述。关于减少环境干扰方面，目前我总结的方法如下：</p><ol><li>戴上耳机（不一定放音乐，有时音乐也是一种干扰）</li><li>手机、电脑开启<strong>免打扰</strong>模式</li><li>即时通讯工具设置自动回复，委婉告诉别人不希望被打扰</li></ol><h2 id="保持专注"><a href="#保持专注" class="headerlink" title="保持专注"></a>保持专注</h2><p><strong><em>减少环境干扰是去除外界干扰，保持专注则是去除内心干扰。</em></strong></p><p>外部的干扰可以去除，内心自己的声音难以拒绝。比如肚子饿啦、想喝水啦类似这样的需求，可以提前将这些东西准备在身旁，减少分心时间，以便自己可以迅速回到工作当中。</p><p>工作时，做一个单线程的仔，保持自己内心的专注，一心扑在工作上。一下子突然专心太久可能有点难，可以通过循序渐进地方式慢慢延长自己的专注时间。</p><h2 id="减少重复的工作"><a href="#减少重复的工作" class="headerlink" title="减少重复的工作"></a>减少重复的工作</h2><p>当一件事重复做三遍的时候，就可以考虑自动化了。</p><p>比如批量重命名图片、自动将<code>dist</code>文件夹打包成<code>zip</code>格式、<code>eslint</code>统一代码风格等等，都是利用机器解放我们的时间，所以要善用自动化，留出大把时间去提升自己。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>以上是我对于提升工作效率的思考。近期由于疫情在家办公，自己按照以上标准工作，感觉爽歪歪，每天都有成就感，也从侧面证实这些标准对自己大有裨益。</p><p>行文匆匆，难有疏漏，如有错误还请在评论区指出。</p>]]></content>
    
    
    <categories>
      
      <category>思考总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模拟面试</tag>
      
      <tag>激情</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
